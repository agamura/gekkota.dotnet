<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gekkota</name>
    </assembly>
    <members>
        <member name="T:Gekkota.Net.FieldCategory">
            <summary>
            Defines <see cref="T:Gekkota.Net.Field"/> category values.
            </summary>
            <seealso cref="T:Gekkota.Net.Field"/>
        </member>
        <member name="F:Gekkota.Net.FieldCategory.Undefined">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> is of a undefined category.
            </summary>
        </member>
        <member name="F:Gekkota.Net.FieldCategory.Manifest">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> is of a manifest field.
            </summary>
        </member>
        <member name="F:Gekkota.Net.FieldCategory.Header">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> is a header field.
            </summary>
        </member>
        <member name="F:Gekkota.Net.FieldCategory.Payload">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> is a payload field.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Datagram">
             <summary>
             Represents a datagram.
             </summary>
             <example>
             The following example shows how to create and initialize a <c>Datagram</c>
             and how to print out its content.
             <code>
             <![CDATA[
             using System;
             using Gekkota.Net;
            
             public class MyClass
             {
               public static void Main()
               {
                 //
                 // create and initialize a new Datagram
                 //
                 Datagram datagram = new Datagram();
                 datagram.Add(new Field(1, "Red"));
                 datagram.Add(new Field(2, "Green"));
                 datagram.Add(new Field(3, "Blue"));
            
                 //
                 // display the content of the Datagram
                 //
                 Console.WriteLine("datagram");
                 Console.WriteLine("\tCount:           {0}", datagram.Count);
                 Console.WriteLine("\tIsFixedSize:     {0}", datagram.IsFixedSize);
                 Console.WriteLine("\tIsReadOnly:      {0}", datagram.IsReadOnly);
                 Console.WriteLine("\tIsSynchronized:  {0}", datagram.IsSynchronized);
                 Console.WriteLine("\tSize:            {0}", datagram.Size);
                 Console.WriteLine("\tFields:");
                 foreach (Field field in datagram) {
                   Console.WriteLine("\n\t\t{0} {1}", field.Id, field.ValueAsString);
                 }
               }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             datagram
                 Count:           3
                 IsFixedSize:     false
                 IsReadOnly:      false
                 IsSynchronized:  false
                 Size:            15
                 Fields:
                     1 Red
                     2 Green
                     3 Blue
             ]]>
             </example>
             <seealso cref="T:Gekkota.Collections.LinkedList`1"/>
             <seealso cref="T:Gekkota.Net.Field"/>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1">
             <summary>
             Implements a doubly-linked list with sort support.
             </summary>
             <example>
             The following example shows how to create and initialize a
             <c>LinkedList</c> and how to print out its content.
             <code>
             <![CDATA[
             using System;
             using Gekkota.Collections;
            
             public class MyClass
             {
                 public static void Main()
                 {
                     //
                     // create and initialize a new LinkedList
                     //
                     LinkedList<string> list = new LinkedList<string>();
                     list.Add("Red");
                     list.Add("Green");
                     list.Add("Blue");
            
                     //
                     // sort the elements of the LinkedList using the IComparable
                     // implementation of each element
                     //
                     list.Sort();
            
                     //
                     // display the content of the LinkedList
                     //
                     Console.WriteLine("list");
                     Console.WriteLine("\tCount:           {0}", list.Count);
                     Console.WriteLine("\tIsFixedSize:     {0}", list.IsFixedSize);
                     Console.WriteLine("\tIsReadOnly:      {0}", list.IsReadOnly);
                     Console.WriteLine("\tIsSynchronized:  {0}", list.IsSynchronized);
                     Console.WriteLine("\tIsSorted:        {0}", list.IsSorted);
                     Console.WriteLine("\tSorted:          {0}", list.Sorted);
                     Console.WriteLine("\tValues:");
                     foreach (string element in list) {
                         Console.WriteLine("\n\t\t{0}", element);
                     }
            
                     //
                     // removes all the elements from the LinkedList
                     //
                     list.Clear();
                 }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             list
                 Count:           3
                 IsFixedSize:     false
                 IsReadOnly:      false
                 IsSynchronized:  false
                 IsSorted:        true
                 Sorted:          false
                 Values:
                     Blue
                     Green
                     Red
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> class with
            the specified boolean value indicating whether or not the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is sorted.
            </summary>
            <param name="sorted">
            A <see cref="T:System.Boolean"/> value indicating whether or not the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> has to be
            sorted.
            </param>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Add(`0)">
            <summary>
            Adds the specified element to the end of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            The element to add to the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
            <returns>
            An <see cref="T:System.Int32"/> that represents the position at which
            the new element has been added.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            read-only.
            <para>-or</para>
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
            fixed size.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Clear">
            <summary>
            Removes all the elements from the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            read-only.
            <para>-or</para>
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
            fixed size.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Clone">
            <summary>
            Creates a shallow copy of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <returns>
            A shallow copy of the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Contains(`0)">
            <summary>
            Determines whether or not the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> contains the
            specified element.
            </summary>
            <param name="value">
            The element to locate in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is found in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            The comparation algorithm can be overridden by setting the
            <see cref="P:Gekkota.Collections.LinkedList`1.Comparer"/>
            property to a customized implementation of the
            <see cref="T:System.Collections.IComparer"/> interface.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.CopyTo(`0[],System.Int32)">
             <summary>
             Copies the <see cref="T:Gekkota.Collections.LinkedList`1"/> to
             the specified one-dimensional array, starting at the specified array
             index.
             </summary>
             <param name="array">
             The one-dimensional <see cref="T:System.Array"/> to which the elements
             of the <see cref="T:Gekkota.Collections.LinkedList`1"/> are
             copied.
             </param>
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="array"/>.
             <para>-or</para>
             The number of elements in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> is greater
             than the available space from <paramref name="index"/> to the end
             of <paramref name="array"/>.
             <para>-or-</para>
             <paramref name="array"/> is multidimensional.
             </exception>
             <example>
             The following example shows how to copy a
             <see cref="T:Gekkota.Collections.LinkedList`1"/> into a
             one-dimensional <see cref="T:System.Array"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
            
             string[] array = new string[list.Length];
             list.CopyTo(array, 0);
            
             for (int i = 0; i < array.Length; i++) {
                 Console.WriteLine(array[i]);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.FixedSize(Gekkota.Collections.LinkedList{`0})">
             <summary>
             Returns a fixed-size wrapper for the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="list">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> to wrap.
             </param>
             <returns>
             A fixed-size wrapper around the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="list"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a fixed-size wrapper
             around a <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
            
             LinkedList<string> fixedSizeList = LinkedList<string>.FixedSize(list);
            
             //
             // replacing existing elements is allowed in the fixed-size LinkedList
             //
             fixedSizeList[2] = "White";
            
             //
             // sort and reverse is allowed in the fixed-size LinkedList
             //
             fixedSizeList.Sort();
             fixedSizeList.Reverse();
            
             //
             // adding or inserting elements to the fixed-size LinkedList throws an
             // exception
             //
             try {
                 fixedSizeList.Add("Black");
             } catch (NotSupportedException e) {
                 Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Cannot add or remove elements.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <returns>
            A <see cref="T:Gekkota.Collections.NodeEnumerator`1"/>
            for the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.IndexOf(`0)">
             <summary>
             Determines the index of the specified element in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="value">
             The element to locate in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </param>
             <returns>
             An <see cref="T:System.Int32"/> that represents the index of
             <paramref name="value"/> if found in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>; otherwise, -1.
             </returns>
             <remarks>
             The comparation algorithm can be overridden by setting the
             <see cref="P:Gekkota.Collections.LinkedList`1.Comparer"/>
             property to a customized implementation of the
             <see cref="T:System.Collections.IComparer"/> interface.
             </remarks>
             <example>
             The following example shows how to determine the index of a
             specified element.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
            
             foreach (string element in list) {
                 Console.WriteLine("\"{0}\" is at index {1}.",
                     element, list.IndexOf(item);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             "Red" is at index 0.
             "Green" is at index 1.
             "Blue" is at index 2.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Insert(System.Int32,`0)">
             <summary>
             Inserts the specified element into the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> at the
             specified position.
             </summary>
             <param name="index">
             An <see cref="T:System.Int32"/> that represents the zero-based index
             at which <paramref name="value"/> should be inserted.
             </param>
             <param name="value">
             The element to insert into the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </param>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is sorted.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0;
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is greater than
             <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
             <para>-or-</para>
             <paramref name="index"/> is greater than 0 while the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> is empty.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
             read-only.
             <para>-or-</para>
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
             fixed size.
             </exception>
             <example>
             The following example shows how to insert elements into the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Insert(0, "Red");
             list.Insert(1, "Green");
             list.Insert(2, "Blue");
            
             foreach (string element in list) {
                 Console.WriteLine(element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.ReadOnly(Gekkota.Collections.LinkedList{`0})">
             <summary>
             Returns a read-only wrapper for the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="list">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> to wrap.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="list"/> is <see langword="null"/>.
             </exception>
             <returns>
             A read-only wrapper around the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </returns>
             <example>
             The following example shows how to create a read-only wrapper around
             a <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
            
             LinkedList<string> readOnlyList = LinkedList<string>.ReadOnly(list);
            
             //
             // any attempt to modify a read-only LinkedList throws an exception
             //
             try {
                 readOnlyList.Sort();
             } catch (NotSupportedException e) {
                 Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Instance not modifiable.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Remove(`0)">
             <summary>
             Removes the first occurrence of the specified value from the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="value">
             The value to remove from the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </param>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
             read-only.
             <para>-or-</para>
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
             fixed size.
             </exception>
             <example>
             The following example shows how to remove elements from a
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
             list.Add("White");
             list.Add("Black");
            
             list.Remove("White");
             list.Remove("Black");
            
             foreach (string element in list) {
                 Console.WriteLine(element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index from the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="index">
             An <see cref="T:System.Int32"/> that represents the zero-based index
             of the element to remove from the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than
             <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is empty.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
             read-only.
             <para>-or-</para>
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
             fixed size.
             </exception>
             <example>
             The following example shows how to remove elements at specified
             indexes from a <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
             list.Add("White");
             list.Add("Black");
            
             list.RemoveAt(3);
             list.RemoveAt(4);
            
             foreach (string element in list) {
                 Console.WriteLine(element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Reverse">
             <summary>
             Reverses the order of the elements in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
             read-only.
             </exception>
             <example>
             The following example shows how to reverse the order of the elements
             in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
             list.Add("White");
             list.Add("Black");
            
             Console.WriteLine("The LinkedList before reversing:");
             foreach (string element in list) {
                 Console.WriteLine("\t{0}", element);
             }
            
             list.Reverse();
            
             Console.WriteLine("\nThe LinkedList after reversing:");
             foreach (string element in list) {
                 Console.WriteLine("\t{0}", element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             The LinkedList before reversion:
                 Red
                 Green
                 Blue
                 White
                 Black
            
             The LinkedList after reversing:
                 Black
                 White
                 Blue
                 Green
                 Red
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Sort">
             <summary>
             Sorts the elements of the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> using the
             <see cref="T:System.IComparable"/> implementation of each element.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             One or more elements in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> do not
             implement the <see cref="T:System.IComparable"/> interface.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
             read-only.
             </exception>
             <remarks>
             The <c>Sort</c> method uses the QuickSort algorithm.
             </remarks>
             <example>
             The following example shows how to sort the elements in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new LinkedList
             //
             LinkedList<string> list = new LinkedList<string>();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
             list.Add("White");
             list.Add("Black");
            
             Console.WriteLine("The LinkedList before sorting:");
             foreach (string element in list) {
                 Console.WriteLine("\t{0}", element);
             }
            
             list.Sort();
            
             Console.WriteLine("\nThe LinkedList after sorting:");
             foreach (string element in list) {
                 Console.WriteLine("\t{0}", element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             The LinkedList before sorting:
                 Red
                 Green
                 Blue
                 White
                 Black
            
             The LinkedList after sorting:
                 Black
                 Blue
                 Green
                 Red
                 White
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Synchronized(Gekkota.Collections.LinkedList{`0})">
             <summary>
             Returns a synchronized wrapper for the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <param name="list">
             The <see cref="T:Gekkota.Collections.LinkedList`1"/> to wrap.
             </param>
             <returns>
             A synchronized wrapper around the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="list"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a synchronized wrapper
             around a <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             LinkedList<string> list = new LinkedList<string>();
             Console.WriteLine("list is {0}.",
                 list.IsSynchronized ? "synchronized" : "not synchronized");
            
             LinkedList<string> syncList = LinkedList<string>.Synchronized(list);
             Console.WriteLine("list is {0}.",
                 syncList.IsSynchronized ? "synchronized" : "not synchronized");
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             list is not synchronized.
             list is synchronized.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnClear">
            <summary>
            Performs additional custom processes before clearing the contents of
            the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <remarks>
            The default implementation of the <c>OnClear</c> method does
            nothing. Derived classes can override it to perform some action
            before the <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            cleared.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of
            the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <remarks>
            The default implementation of the <c>OnClearComplete</c> method does
            nothing. Derived classes can override it to perform some action
            after the <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            cleared.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnGet(System.Int32,`0)">
            <summary>
            Performs additional custom processes before getting the element at
            the specified index in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the element to get.
            </param>
            <param name="currentValue">
            The current element at <paramref name="index"/>.
            </param>
            <returns>
            The element at <paramref name="index"/>.
            </returns>
            <remarks>
            The default implementation of the <c>OnGet</c> method returns
            <paramref name="currentValue"/>. Derived classes can override it to
            perform additional action when the specified element is retrieved.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnInsert(System.Int32,`0)">
            <summary>
            Performs additional custom processes before inserting a new element
            into the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            at which <paramref name="value"/> is to be inserted.
            </param>
            <param name="value">
            The element to insert into the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnInsert</c> method does
            nothing. Derived classes can override it to perform some action
            before the specified element is inserted.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnInsertComplete(System.Int32,`0)">
            <summary>
            Performs additional custom processes after inserting a new element
            into the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            at which <paramref name="value"/> has been inserted.
            </param>
            <param name="value">
            The element inserted into the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnInsertComplete</c> method
            does nothing. Derived classes can override it to perform some action
            after the specified element is inserted.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnRemove(System.Int32,`0)">
            <summary>
            Performs additional custom processes before removing an element from
            the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the element to remove.
            </param>
            <param name="value">
            The element to remove from the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnRemove</c> method does
            nothing. Derived classes can override it to perform some action
            before the specified element is removed.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnRemoveComplete(System.Int32,`0)">
            <summary>
            Performs additional custom processes after removing an element from
            the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the removed element.
            </param>
            <param name="value">
            The element removed from the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnRemoveComplete</c> method
            does nothing. Derived classes can override it to perform some action
            after the specified element is removed.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Performs additional custom processes before setting an element in
            the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the element to locate.
            </param>
            <param name="oldValue">
            The current element at <paramref name="index"/>.
            </param>
            <param name="newValue">
            The element to set at <paramref name="index"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnSet</c> method does nothing.
            Derived classes can override it to perform some action before the
            specified element is set.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnSetComplete(System.Int32,`0,`0)">
            <summary>
            Performs additional custom processes after setting an element in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the element to locate.
            </param>
            <param name="oldValue">
            The old element at <paramref name="index"/>.
            </param>
            <param name="newValue">
            The new element at <paramref name="index"/>.
            </param>
            <remarks>
            The default implementation of the <c>OnSetComplete</c> method does
            nothing. Derived classes can override it to perform some action
            after the specified element is set.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.OnValidate(`0)">
            <summary>
            Performs additional custom processes when validating the specified
            element.
            </summary>
            <param name="value">
            The element to validate.
            </param>
            <remarks>
            The default implementation of the <c>OnValidate</c> method does
            nothing. Derived classes can override it to perform some action when
            the specified element is validated.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.GetNode(`0,System.Int32@)">
            <summary>
            Returns the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            that contains the specified value.
            </summary>
            <param name="value">
            The value contained by the
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> to
            locate in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            that contains <paramref name="value"/>, if found; otherwise, -1.
            </param>
            <returns>
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> that
            contains <paramref name="value"/>, if found; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.GetNodeAt(System.Int32)">
            <summary>
            Returns the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            at the specified index.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based
            index of the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            to return.
            </param>
            <returns>
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> at
            <paramref name="index"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than
            <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is empty.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.InternalInsert(System.Int32,`0)">
            <summary>
            Inserts the specified element into the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> at the
            specified position.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            at which <paramref name="value"/> should be inserted.
            </param>
            <param name="value">
            The element to insert into the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0;
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is greater than
            <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
            <para>-or-</para>
            <paramref name="index"/> is greater than 0 while the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            read-only.
            <para>-or-</para>
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> has a
            fixed size.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Compare(`0,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Compares the specified values using the specified comparer.
            </summary>
            <param name="value1">
            The value to compare with <paramref name="value2"/>.
            </param>
            <param name="value2">
            The value to compare with <paramref name="value1"/>.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> implementation to be
            used to compare <paramref name="value1"/> and
            <paramref name="value2"/>.
            </param>
            <returns>
            Less than 0 if <paramref name="value1"/> is less than
            <paramref name="value2"/>.
            <para>-or-</para>
            Zero if <paramref name="value1"/> equals
            <paramref name="value2"/>.
            <para>-or-</para>
            Greater than 0 if <paramref name="value1"/> is greater than
            <paramref name="value2"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.GetInsertionIndex(`0)">
            <summary>
            Returns the position at which the specified value should be inserted
            into the <see cref="T:Gekkota.Collections.LinkedList`1"/>
            </summary>
            <param name="value">
            The value being inserted.
            </param>
            <returns>
            An <see cref="T:System.Int32"/> that represents the position at
            which <paramref name="value"/> should be inserted.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.QuickSort(Gekkota.Collections.LinkedList{`0}.Node,Gekkota.Collections.LinkedList{`0}.Node,System.Collections.Generic.IComparer{`0})">
            <summary>
            Implements the QuickSort algorithm.
            </summary>
            <param name="first">
            The first <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            of the sequence to sort.
            </param>
            <param name="last">
            The last <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            of the sequence to sort.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> implementation to
            use when comparing
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> values.
            <para>-or-</para>
            <see langword="null"/> to use the <see cref="T:System.IComparable"/>
            implementation of each
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> value.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is <see langword="null"/> and one or
            more <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            values in the <see cref="T:Gekkota.Collections.LinkedList`1"/>
            do not implement the <see cref="T:System.IComparable"/> interface.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Remove(Gekkota.Collections.LinkedList{`0}.Node,System.Int32)">
            <summary>
            Removes the specified
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> from the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="node">
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> to
            remove.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of <paramref name="node"/>.
            </param>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Swap(Gekkota.Collections.LinkedList{`0}.Node,Gekkota.Collections.LinkedList{`0}.Node)">
            <summary>
            Swaps the specified nodes.
            </summary>
            <param name="node1">
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> to
            swap with <paramref name="node2"/>.
            </param>
            <param name="node2">
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> to
            swap with <paramref name="node1"/>.
            </param>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the element to get or set.
            </param>
            <value>
            The element at <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than
            <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            read-only.
            </exception>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Comparer">
             <summary>
             Gets or sets the comparer to use for the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <value>
             An <see cref="T:System.Collections.Generic.IComparer`1"/> that
             represents the comparer to use for the
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </value>
             <example>
             The following example shows how to customize the way elements in the
             <see cref="T:Gekkota.Collections.LinkedList`1"/> are compared.
             <code>
             <![CDATA[
             string[] elements = { "Red", "Green", "Blue", "White", "Black" };
             LinkedList<string> list = new LinkedList<string>();
             list.Comparer = new MyComparer();
            
             foreach (string element in elements) {
                 list.Add(element);
             }
            
             //
             // remove all the elements with a length of five
             //
             for (int i = 0; i < elements.Length; i++) {
                 list.Remove(elements[i]);
             }
            
             foreach (string element in list) {
                 Console.WriteLine(element);
             }
            
             ...
            
             public class MyComparer : IComparer
             {
                 int IComparer.Compare(object x, object y)
                 {
                     int length = ((string) x).Length;
            
                     if (length > 5) {
                         return 1;
                     } else if (length < 5) {
                         return -1;
                     }
            
                     return 0;
               }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Blue
             ]]>
             </example>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of elements
            contained in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.IsFixedSize">
            <summary>
            Specifies whether the <see cref="T:Gekkota.Collections.LinkedList`1"/>
            has a fixed size.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> has a fixed
            size; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.IsReadOnly">
            <summary>
            Specifies whether the <see cref="T:Gekkota.Collections.LinkedList`1"/>
            is read-only.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is read-only;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.IsSorted">
            <summary>
            Gets a value indicating whether or not the elements of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> are sorted.
            </summary>
            <value>
            <see langword="true"/> if the elements of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> are sorted;
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The <c>IsSorted</c> property is <see langword="true"/> if the
            <see cref="M:Gekkota.Collections.LinkedList`1.Sort"/> method
            has been explicitly invoked or the
            <see cref="P:Gekkota.Collections.LinkedList`1.Sorted"/>
            property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.IsSynchronized">
            <summary>
            Gets a value indicating whether or not access to the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            synchronized.
            </summary>
            <value>
            <see langword="true"/> if access to the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is
            synchronized; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Sorted">
            <summary>
            Gets a value indicating whether or not the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is sorted.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> is sorted;
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            If the <c>Sorted</c> property is <see langword="true"/> the
            <see cref="M:Gekkota.Collections.LinkedList`1.Sort"/> method
            does nothing and the
            <see cref="P:Gekkota.Collections.LinkedList`1.IsSorted"/>
            property is always <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.SyncRoot">
            <summary>
            Gets an <see cref="T:System.Object"/> that can be used to synchronize
            access to the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that can be used to synchronize access
            to the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
            <example>
            The following example shows how to lock the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> using
            <c>SyncRoot</c> during the entire enumeration.
            <code>
            <![CDATA[
            LinkedList<string> list = new LinkedList<string>();
            
            ...
            
            lock (list.SyncRoot) {
                foreach (string element in list) {
                    //
                    // insert your code here
                    //
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Head">
            <summary>
            Gets the first <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            The first <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.LinkedList`1.Tail">
            <summary>
            Gets the last <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            The last <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1.Node">
            <summary>
            Represents a node in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="F:Gekkota.Collections.LinkedList`1.Node.Value">
            <summary>
            The value of the current
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>.
            </summary>
        </member>
        <member name="F:Gekkota.Collections.LinkedList`1.Node.Prev">
            <summary>
            The previous <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>.
            </summary>
            <remarks>
            The <c>Prev</c> field is <see langword="null"/> if the current
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> is
            the first one.
            </remarks>
        </member>
        <member name="F:Gekkota.Collections.LinkedList`1.Node.Next">
            <summary>
            The next node.
            </summary>
            <remarks>
            The <c>Next</c> field is <see langword="null"/> if the current
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> is
            the last one.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Node.#ctor">
            <summary>
            Initialized a new instance of the
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            class.
            </summary>
        </member>
        <member name="M:Gekkota.Collections.LinkedList`1.Node.#ctor(`0,Gekkota.Collections.LinkedList{`0}.Node,Gekkota.Collections.LinkedList{`0}.Node)">
            <summary>
            Initialized a new instance of the
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            class with the specified value, previous node, and next node.
            </summary>
            <param name="value">
            The value of the node.
            </param>
            <param name="prev">
            The previous node.
            </param>
            <param name="next">
            The next node.
            </param>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1.LinkedListWrapper">
            <summary>
            Implements a wrapper for the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1.FixedSizeLinkedList">
            <summary>
            Implements a fixed-size wrapper for the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1.ReadOnlyLinkedList">
            <summary>
            Implements a read-only wrapper for the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Collections.LinkedList`1.SyncLinkedList">
            <summary>
            Implements a synchronized wrapper for the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Datagram.op_Equality(Gekkota.Net.Datagram,Gekkota.Net.Datagram)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Datagram"/> objects are equal.
            </summary>
            <param name="datagram1">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram2"/>.
            </param>
            <param name="datagram2">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="datagram1"/> is equal
            to <paramref name="datagram2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.op_Inequality(Gekkota.Net.Datagram,Gekkota.Net.Datagram)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Datagram"/> objects are not equal.
            </summary>
            <param name="datagram1">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram2"/>.
            </param>
            <param name="datagram2">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="datagram1"/> is not equal
            to <paramref name="datagram2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Datagram"/>
            class.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Datagram.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Datagram"/>
            class with the specified boolean value indicating whether or not the
            <see cref="T:Gekkota.Net.Datagram"/> is sorted.
            </summary>
            <param name="sorted">
            A <see cref="T:System.Boolean"/> value indicating whether or not the
            <see cref="T:Gekkota.Net.Datagram"/> has to be sorted.
            </param>
        </member>
        <member name="M:Gekkota.Net.Datagram.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <returns>
            A shallow copy of the <see cref="T:Gekkota.Net.Datagram"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.Contains(Gekkota.Net.Metafield)">
            <summary>
            Determines whether or not the <see cref="T:Gekkota.Net.Datagram"/>
            contains the <see cref="T:Gekkota.Net.Field"/> described by the
            specified <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <param name="metafield">
            The <see cref="T:Gekkota.Net.Metafield"/> that describes the
            <see cref="T:Gekkota.Net.Field"/> to locate in the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Field"/>
            described by <paramref name="metafield"/> is found in the
            <see cref="T:Gekkota.Net.Datagram"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.Equals(Gekkota.Net.Datagram,Gekkota.Net.Datagram)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Datagram"/> objects are equal.
            </summary>
            <param name="datagram1">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram2"/>.
            </param>
            <param name="datagram2">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with
            <paramref name="datagram1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="datagram1"/> is equal to
            <paramref name="datagram2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.Equals(Gekkota.Net.Datagram)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Datagram"/> is equal to the current
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to compare with the current
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="datagram"/> is equal to
            the current <see cref="T:Gekkota.Net.Datagram"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.Equals(System.Object)">
            <summary>
            Determines whether or not the specified
            <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="datagram"/> is equal to
            the current <see cref="T:Gekkota.Net.Datagram"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.FixedSize(Gekkota.Net.Datagram)">
             <summary>
             Returns a fixed-size wrapper for the
             <see cref="T:Gekkota.Net.Datagram"/>.
             </summary>
             <param name="datagram">
             The <see cref="T:Gekkota.Net.Datagram"/> to wrap.
             </param>
             <returns>
             A fixed-size wrapper around the <see cref="T:Gekkota.Net.Datagram"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="datagram"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a fixed-size wrapper
             around a <see cref="T:Gekkota.Net.Datagram"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Datagram
             //
             Datagram datagram = new Datagram();
             datagram.Add(new Field(1, "Red"));
             datagram.Add(new Field(2, "Green"));
             datagram.Add(new Field(3, "Blue"));
            
             Datagram fixedSizeDatagram = Datagram.FixedSize(datagram);
            
             //
             // replacing existing fields is allowed in the fixed-size Datagram
             //
             fixedSizeDatagram[2] = new Field(4, "White");
            
             //
             // sort and reverse is allowed in the fixed-size Datagram
             //
             fixedSizeDatagram.Sort();
             fixedSizeDatagram.Reverse();
            
             //
             // adding or inserting elements to the fixed-size Datagram throws an
             // exception
             //
             try {
               fixedSizeDatagram.Add(new Field(5, "Black"));
             } catch (NotSupportedException e) {
               Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Cannot add or remove elements.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Datagram.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <returns>
            A <see cref="T:Gekkota.Net.FieldEnumerator"/> for the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Datagram.IndexOf(Gekkota.Net.Metafield)">
             <summary>
             Determines the index of the <see cref="T:Gekkota.Net.Field"/>
             described by the specified <see cref="T:Gekkota.Net.Metafield"/> in
             the <see cref="T:Gekkota.Net.Datagram"/>.
             </summary>
             <param name="metafield">
             A <see cref="T:Gekkota.Net.Metafield"/> that describes the
             <see cref="T:Gekkota.Net.Field"/> to locate in the
             <see cref="T:Gekkota.Net.Datagram"/>.
             </param>
             <returns>
             An <see cref="T:System.Int32"/> that represents the index of the
             <see cref="T:Gekkota.Net.Field"/> described by
             <paramref name="metafield"/> if found in the
             <see cref="T:Gekkota.Net.Datagram"/>; otherwise, -1.
             </returns>
             <example>
             The following example shows how to determine the index of a
             <see cref="T:Gekkota.Net.Field"/> described by a specified
             <see cref="T:Gekkota.Net.Metafield"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Datagram
             //
             Datagram datagram = new Datagram();
             datagram.Add(new Field(1, "Red"));
             datagram.Add(new Field(2, "Green"));
             datagram.Add(new Field(3, "Blue"));
            
             foreach (Field field in datagram) {
               Console.WriteLine("\"{0}\" is at index {1}.",
                 field.ValueAsString, datagram.IndexOf(field.GetMetafield());
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             "Red" is at index 0.
             "Green" is at index 1.
             "Blue" is at index 2.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Datagram.ReadOnly(Gekkota.Net.Datagram)">
             <summary>
             Returns a read-only wrapper for the
             <see cref="T:Gekkota.Net.Datagram"/>.
             </summary>
             <param name="datagram">
             The <see cref="T:Gekkota.Net.Datagram"/> to wrap.
             </param>
             <returns>
             A read-only wrapper around the <see cref="T:Gekkota.Net.Datagram"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="datagram"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a read-only wrapper around
             a <see cref="T:Gekkota.Net.Datagram"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Datagram
             //
             Datagram datagram = new Datagram();
             datagram.Add(new Field(1, "Red"));
             datagram.Add(new Field(2, "Green"));
             datagram.Add(new Field(3, "Blue"));
            
             Datagram readOnlyDatagram = Datagram.ReadOnly(datagram);
            
             //
             // any attempt to modify a read-only Datagram throws an exception
             //
             try {
               readOnlyDatagram.Sort();
             } catch (NotSupportedException e) {
               Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Instance not modifiable.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Datagram.Remove(Gekkota.Net.Metafield)">
             <summary>
             Removes the first occurrence of the <see cref="T:Gekkota.Net.Field"/>
             described by the specified <see cref="T:Gekkota.Net.Metafield"/> from
             the <see cref="T:Gekkota.Net.Datagram"/>.
             </summary>
             <param name="metafield">
             A <see cref="T:Gekkota.Net.Metafield"/> that describes the
             <see cref="T:Gekkota.Net.Field"/> to remove from the
             <see cref="T:Gekkota.Net.Datagram"/>.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="metafield"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:Gekkota.Net.Datagram"/> is read-only.
             <para>-or-</para>
             The <see cref="T:Gekkota.Net.Datagram"/> has a fixed size.
             </exception>
             <example>
             The following example shows how to remove fields from a
             <see cref="T:Gekkota.Net.Datagram"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Datagram
             //
             Datagram datagram = new Datagram();
             datagram.Add(new Field(1, "Red"));
             datagram.Add(new Field(2, "Green"));
             datagram.Add(new Field(3, "Blue"));
             datagram.Add(new Field(4, "White"));
            
             datagram.Remove(datagram[1].GetMetafield());
             datagram.Remove(datagram[3].GetMetafield());
            
             foreach (Field field in datagram) {
               Console.WriteLine(field.ValueAsString);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Datagram.Synchronized(Gekkota.Net.Datagram)">
             <summary>
             Returns a synchronized wrapper for the
             <see cref="T:Gekkota.Net.Datagram"/>.
             </summary>
             <param name="datagram">
             The <see cref="T:Gekkota.Net.Datagram"/> to wrap.
             </param>
             <returns>
             A synchronized wrapper around the <see cref="T:Gekkota.Net.Datagram"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="datagram"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a synchronized wrapper
             around a <see cref="T:Gekkota.Net.Datagram"/>.
             <code>
             <![CDATA[
             Datagram datagram = new Datagram();
             Console.WriteLine("datagram is {0}.",
               datagram.IsSynchronized ? "synchronized" : "not synchronized");
            
             Datagram syncDatagram = Datagram.Synchronized(datagram);
             Console.WriteLine("datagram is {0}.",
               syncDatagram.IsSynchronized ? "synchronized" : "not synchronized");
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             datagram is not synchronized.
             datagram is synchronized.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnClearComplete">
            <summary>
            Sets the <see cref="P:Gekkota.Net.Datagram.Size"/> property to 0.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnInsertComplete(System.Int32,Gekkota.Net.Field)">
            <summary>
            Increments the <see cref="T:Gekkota.Net.Datagram"/> size by the size
            of the specified <see cref="T:Gekkota.Net.Field"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            at which <paramref name="field"/> has been inserted.
            </param>
            <param name="field">
            The <see cref="T:Gekkota.Net.Field"/> inserted into the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnRemoveComplete(System.Int32,Gekkota.Net.Field)">
            <summary>
            Decrements the <see cref="T:Gekkota.Net.Datagram"/> size by the size
            of the specified <see cref="T:Gekkota.Net.Field"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the removed <see cref="T:Gekkota.Net.Field"/>.
            </param>
            <param name="field">
            The <see cref="T:Gekkota.Net.Field"/> removed from the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnSetComplete(System.Int32,Gekkota.Net.Field,Gekkota.Net.Field)">
            <summary>
            Adjusts the <see cref="T:Gekkota.Net.Datagram"/> size by subtracting
            the size of <paramref name="oldField"/> and then by adding the size
            of <paramref name="newField"/>.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the <see cref="T:Gekkota.Net.Field"/> to locate.
            </param>
            <param name="oldField">
            The old <see cref="T:Gekkota.Net.Field"/> at <paramref name="index"/>.
            </param>
            <param name="newField">
            The new <see cref="T:Gekkota.Net.Field"/> at <paramref name="index"/>.
            </param>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnValidate(Gekkota.Net.Field)">
            <summary>
            Checks whether or not the specified element is <see langword="null"/>.
            </summary>
            <param name="value">
            The element to validate.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Datagram.OnValidate(Gekkota.Net.Metafield)">
            <summary>
            Checks whether or not the specified element descriptor is
            <see langword="null"/>.
            </summary>
            <param name="value">
            The element descriptor to validate.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Datagram.GetNode(Gekkota.Net.Metafield,System.Int32@)">
            <summary>
            Returns the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            that contains the <see cref="T:Gekkota.Net.Field"/> described by the
            specified <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <param name="metafield">
            The <see cref="T:Gekkota.Net.Metafield"/> that describes the
            <see cref="T:Gekkota.Net.Field"/> contained by the
            <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> to locate
            in the <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index
            of the <see cref="T:Gekkota.Collections.LinkedList`1.Node"/>
            that contains the <see cref="T:Gekkota.Net.Field"/> described by
            <paramref name="metafield"/>, if found; otherwise, -1.
            </param>
            <returns>
            The <see cref="T:Gekkota.Collections.LinkedList`1.Node"/> that
            contains the <see cref="T:Gekkota.Net.Field"/> described by
            <paramref name="metafield"/>, if found; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Gekkota.Net.Datagram.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> at the specified
            index.
            </summary>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the zero-based index of
            the <see cref="T:Gekkota.Net.Field"/> to get or set.
            </param>
            <value>
            The <see cref="T:Gekkota.Net.Field"/> at <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than
            <see cref="P:Gekkota.Collections.LinkedList`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Datagram"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Net.Datagram"/> is read-only.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Datagram.Item(Gekkota.Net.Metafield)">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> described by the
            specified <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <param name="metafield">
            A <see cref="T:Gekkota.Net.Metafield"/> that describes the
            <see cref="T:Gekkota.Net.Field"/> to get or set.
            </param>
            <value>
            The <see cref="T:Gekkota.Net.Field"/> described by
            <paramref name="metafield"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metafield"/> or the specified value is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:Gekkota.Net.Field"/> described by
            <paramref name="metafield"/> does not exist in the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Datagram"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Net.Datagram"/> is read-only.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Datagram.Size">
            <summary>
            Gets the size of the <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the size of the
            <see cref="T:Gekkota.Net.Datagram"/>, in bytes.
            </value>
        </member>
        <member name="T:Gekkota.Net.Datagram.DatagramWrapper">
            <summary>
            Implements a wrapper for the <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Datagram.FixedSizeDatagram">
            <summary>
            Implements a fixed-size wrapper for the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Datagram.ReadOnlyDatagram">
            <summary>
            Implements a read-only wrapper for the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Datagram.SyncDatagram">
            <summary>
            Implements a synchronized wrapper for the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Datagram.DefaultComparer">
            <summary>
            Implements the default comparer for the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.ReceiveEventHandler">
            <summary>
            Represents the method that handles the <c>Receive</c> event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="args">
            A <see cref="T:Gekkota.Net.Sockets.ReceiveEventArgs"/> that contains the
            event data.
            </param>
        </member>
        <member name="T:Gekkota.Net.Sockets.ReceiveEventArgs">
            <summary>
            Provides data for the <c>Receive</c> event.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.ReceiveEventArgs.#ctor(Gekkota.Net.Datagram,System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.ReceiveEventArgs"/> class with the
            specified datagram and remote endpoint.
            </summary>
            <param name="datagram">
            The received <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <param name="remoteEndPoint">
            The remote <see cref="T:System.Net.EndPoint"/> from which
            <paramref name="datagram"/> was sent.
            </param>
        </member>
        <member name="P:Gekkota.Net.Sockets.ReceiveEventArgs.Datagram">
            <summary>
            Gets the received <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <value>
            The received <see cref="T:Gekkota.Net.Datagram"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.ReceiveEventArgs.RemoteEndPoint">
            <summary>
            Gets the remote <see cref="T:System.Net.EndPoint"/> from which the
            <see cref="T:Gekkota.Net.Datagram"/> was sent.
            </summary>
            <value>
            An <see cref="T:System.Net.EndPoint"/> that represents the remote
            endpoint from which the <see cref="T:Gekkota.Net.Datagram"/> was
            sent.
            </value>
        </member>
        <member name="T:Gekkota.Utilities.Buffer">
            <summary>
            Provides methods for manipulating arrays of bytes.
            </summary>
        </member>
        <member name="M:Gekkota.Utilities.Buffer.Equals(System.Byte[],System.Byte[])">
            <summary>
            Determines whether or not the specified
            <see cref="T:System.Byte"/> arrays are equal.
            </summary>
            <param name="array1">
            The <see cref="T:System.Byte"/> array to compare with
            <paramref name="array2"/>.
            </param>
            <param name="array2">
            The <see cref="T:System.Byte"/> array to compare with
            <paramref name="array1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="array1"/> is equal to
            <paramref name="array2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Gekkota.Security.Cryptography.ChangeKeyEventHandler">
            <summary>
            Represents the method that handles the <c>ChangeKey</c> event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="args">
            A <see cref="T:Gekkota.Security.Cryptography.ChangeKeyEventArgs"/> that
            contains the event data.
            </param>
        </member>
        <member name="T:Gekkota.Compression.CompressionException">
            <summary>
            The exception thrown when an error occurs during compression or
            decompression.
            </summary>
        </member>
        <member name="M:Gekkota.Compression.CompressionException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.CompressionException"/> class.
            </summary>
        </member>
        <member name="M:Gekkota.Compression.CompressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.CompressionException"/> class
            with the specified message.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that contains the reason why the
            exception occurred.
            </param>
        </member>
        <member name="M:Gekkota.Compression.CompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.CompressionException"/> class
            with the specified message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that contains the reason why the
            exception occurred.
            </param>
            <param name="inner">
            The <see cref="T:System.Exception"/> that is the cause of the current
            exception. If <paramref name="inner"/> is not <see langword="null"/>,
            the current exception is raised in a catch block that handles the inner
            exception. 
            </param>
        </member>
        <member name="M:Gekkota.Compression.CompressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.CompressionException"/> class from
            serialized data.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that
            represents the serialization information object holding the
            serialized object data in the name-value form.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            represents the contextual information about the source or
            destination of the exception.
            </param>
        </member>
        <member name="T:Gekkota.Collections.NodeEnumerator`1">
             <summary>
             Provides a simple iteration mechanism over a
             <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             </summary>
             <example>
             The following example shows how the <c>NodeEnumerator</c> class can be
             used to iterate over a <see cref="T:Gekkota.Collections.LinkedList`1"/>.
             <code>
             <![CDATA[
             LinkedList list = new LinkedList();
             list.Add("Red");
             list.Add("Green");
             list.Add("Blue");
            
             IEnumerator enumerator = list.GetEnumerator();
            
             while (enumerator.MoveNext()) {
                 Console.WriteLine(enumerator.Current);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.NodeEnumerator`1.#ctor(Gekkota.Collections.LinkedList{`0})">
            <summary>
            Initialized a new instance of the
            <see cref="T:Gekkota.Collections.NodeEnumerator`1"/> class.
            </summary>
            <param name="list">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> to
            enumerate.
            </param>
        </member>
        <member name="M:Gekkota.Collections.NodeEnumerator`1.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the
            <see cref="T:Gekkota.Collections.NodeEnumerator`1"/>.
            </summary>
            <remarks>
            The default implementation of the <c>Dispose</c> method does
            nothing.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.NodeEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next node of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced
            to the next node; <see langword="false"/> if the enumerator has
            passed the end of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> was
            modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.NodeEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the
            first node in the <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Collections.LinkedList`1"/> was
            modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Gekkota.Collections.NodeEnumerator`1.Current">
            <summary>
            Gets the value of the current node in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <value>
            The value of the current node in the
            <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first node of the
            <see cref="T:Gekkota.Collections.LinkedList`1"/> or after the
            last node.
            </exception>
        </member>
        <member name="T:Gekkota.Net.ProtocolFieldAttribute">
            <summary>
            Indicates that a <see cref="T:Gekkota.Net.Field"/> is a protocol field.
            </summary>
            <remarks>
            Before sending a <see cref="T:Gekkota.Net.Datagram"/>, the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> validates it by comparing
            its fields to the field descriptors defined for the current protocol
            implementation, and since the caller do not care about protocol
            headers, this attribute should be applied to payload fields only.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.ProtocolFieldAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.ProtocolFieldAttribute"/>class with the
            specified position.
            </summary>
            <param name="position">
            An <see cref="T:System.Int32"/> that represents the zero-based
            position of the <see cref="T:Gekkota.Net.Field"/> in the protocol.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position"/> is less than 0.
            </exception>
        </member>
        <member name="P:Gekkota.Net.ProtocolFieldAttribute.Position">
            <summary>
            Gets the position of the <see cref="T:Gekkota.Net.Field"/> in the
            protocol.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the zero-based
            position of the <see cref="T:Gekkota.Net.Field"/> in the protocol.
            </value>
        </member>
        <member name="T:Gekkota.Net.Field">
             <summary>
             Represents a field in a datagram.
             </summary>
             <example>
             The following example shows how to create and initialize a <c>Field</c>,
             and how to print out its value and properties.
             <code>
             <![CDATA[
             using System;
             using Gekkota.Net;
            
             public class MyClass
             {
               public static void Main()
               {
                 //
                 // create and initialize a new Field
                 //
                 Field field = new Field(1, "Red");
            
                 //
                 // display value and properties of the Field
                 //
                 Console.WriteLine("field");
                 Console.WriteLine("\tCategory:    {0}", field.Category);
                 Console.WriteLine("\tId:          {0}", field.Id);
                 Console.WriteLine("\tIsPrimitive: {0}", field.IsPrimitive);
                 Console.WriteLine("\tIsReadOnly:  {0}", field.IsReadOnly);
                 Console.WriteLine("\tSize:        {0}", field.Size);
                 Console.WriteLine("\tType:        {0}", field.Type);
                 Console.WriteLine("\tValue:       {0}", field.ValueAsString);
               }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             field
                 Category:     FieldCategory.Undefined
                 Id:           1
                 IsPrimitive:  false
                 IsReadOnly:   false
                 Size:         7
                 Type:         FieldType.String
                 Value:        Red
             ]]>
             </example>
             <seealso cref="T:Gekkota.Net.Metafield"/>
             <seealso cref="T:Gekkota.Net.FieldSerializer"/>
             <seealso cref="T:Gekkota.Net.Datagram"/>
        </member>
        <member name="M:Gekkota.Net.Field.op_Equality(Gekkota.Net.Field,Gekkota.Net.Field)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Field"/> objects are equal.
            </summary>
            <param name="field1">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field2"/>.
            </param>
            <param name="field2">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="field1"/> is equal to
            <paramref name="field2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Field.op_Inequality(Gekkota.Net.Field,Gekkota.Net.Field)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Field"/> objects are equal.
            </summary>
            <param name="field1">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field2"/>.
            </param>
            <param name="field2">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="field1"/> is equal to
            <paramref name="field2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Byte)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Byte"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int16)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int16"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int32"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int64)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int64"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Single)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Single"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Double)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Double"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id and value.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Byte"/> array that represents the field value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Byte,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Byte"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int16,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int16"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int32,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int32"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Int64,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            An <see cref="T:System.Int64"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Single,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Single"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Double,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Double"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.String,Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Int32,System.Byte[],Gekkota.Net.FieldCategory)">
            <summary>
            Initialize a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified id, value, and category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> identifier.
            </param>
            <param name="value">
            A <see cref="T:System.Byte"/> array that represents the field value.
            </param>
            <param name="category">
            One of the  <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Field.#ctor(System.Byte[],Gekkota.Net.Metafield)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Field"/>
            class with the specified value and Metafield.
            </summary>
            <param name="value">
            The field value.
            </param>
            <param name="metafield">
            A <see cref="T:Gekkota.Net.Metafield"/> that describes the
            <see cref="T:Gekkota.Net.Field"/>.
            </param>
            <remarks>
            This constructor by-passes any integrity checks, and it is used
            internally to improve performance.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Field.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Gekkota.Net.Field"/>.
            </summary>
            <returns>
            A deep copy of the <see cref="T:Gekkota.Net.Field"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Field.Equals(Gekkota.Net.Field,Gekkota.Net.Field)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Field"/> objects are equal.
            </summary>
            <param name="field1">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field2"/>.
            </param>
            <param name="field2">
            The <see cref="T:Gekkota.Net.Field"/> to compare with
            <paramref name="field1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="field1"/> is equal to
            <paramref name="field2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Field.Equals(Gekkota.Net.Field)">
             <summary>
             Determines whether or not the specified
             <see cref="T:Gekkota.Net.Field"/> is equal to the current
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="field">
             The <see cref="T:Gekkota.Net.Field"/> to compare with the current
             <see cref="T:Gekkota.Net.Field"/>.
             </param>
             <returns>
             <see langword="true"/> if <paramref name="field"/> is equal to the
             current <see cref="T:Gekkota.Net.Field"/>; otherwise,
            <see langword="false"/>.
             </returns>
        </member>
        <member name="M:Gekkota.Net.Field.Equals(System.Object)">
             <summary>
             Determines whether or not the specified
             <see cref="T:System.Object"/> is equal to the current
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="field">
             The <see cref="T:System.Object"/> to compare with the current
             <see cref="T:Gekkota.Net.Field"/>.
             </param>
             <returns>
             <see langword="true"/> if <paramref name="field"/> is equal to the
             current <see cref="T:Gekkota.Net.Field"/>; otherwise,
            <see langword="false"/>.
             </returns>
        </member>
        <member name="M:Gekkota.Net.Field.GetMetafield">
             <summary>
             Returns a <see cref="T:Gekkota.Net.Metafield"/> that describes the
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <returns>
             A <see cref="T:Gekkota.Net.Metafield"/> that describes the
             <see cref="T:Gekkota.Net.Field"/>.
             </returns>
             <example>
             The following example demonstrates the <c>GetMetafield</c> method.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
             Metafield metafield = field.GetMetafield();
            
             //
             // display the properties of the returned metafield
             //
             Console.WriteLine("metafield");
             Console.WriteLine("\tCategory:    {0}", metafield.Category);
             Console.WriteLine("\tId:          {0}", metafield.Id);
             Console.WriteLine("\tIsPrimitive: {0}", metafield.IsPrimitive);
             Console.WriteLine("\tIsReadOnly:  {0}", metafield.IsReadOnly);
             Console.WriteLine("\tSize:        {0}", metafield.Size);
             Console.WriteLine("\tType:        {0}", metafield.Type);
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             metafield
                 Category:     FieldCategory.Undefined
                 Id:           1
                 IsPrimitive:  false
                 IsReadOnly:   false
                 Size:         7
                 Type:         FieldType.String
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Field.Match(Gekkota.Net.Metafield)">
             <summary>
             Returns a value indicating whether or not the specified
             <see cref="T:Gekkota.Net.Metafield"/> describes the current
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="metafield">
             The <see cref="T:Gekkota.Net.Metafield"/> to compare with the
             underlaying <see cref="T:Gekkota.Net.Metafield"/> that describes the
             current <see cref="T:Gekkota.Net.Field"/>.
             </param>
             <returns>
             <see langword="true"/> if <paramref name="metafield"/> describes
             the current <see cref="T:Gekkota.Net.Field"/>; otherwise,
            <see langword="false"/>.
             </returns>
             <example>
             The following example demonstrates the <c>Match</c> method.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
            
             //
             // create and initialize two different Metafield objects
             //
             Metafield metafield1 = new Metafield(1, FieldType.Integral, sizeof(int));
             Metafield metafield2 = new Metafield(2, FieldType.Integral, sizeof(short));
            
             Console.WriteLine("'field' matches 'metafield1': {0}", field.Match(metafield1));
             Console.WriteLine("'field' matches 'metafield2': {0}", field.Match(metafield2));
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             'field' matches 'metafield1': true
             'field' matches 'metafield2': false
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Field.ReadOnly(Gekkota.Net.Field)">
             <summary>
             Returns a read-only wrapper for the <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="field">
             The <see cref="T:Gekkota.Net.Field"/> to wrap.
             </param>
             <returns>
             A read-only wrapper around the <see cref="T:Gekkota.Net.Field"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="field"/> is <see langword="null"/>
             </exception>
             <example>
             The following example shows how to create a read-only wrapper around
             a <see cref="T:Gekkota.Net.Field"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
             Field readOnlyField = Field.ReadOnly(field);
            
             //
             // any attempt to modify a read-only Field throws an exception
             //
             try {
               readOnlyField.Id = 2;
             } catch (NotSupportedException e) {
               Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Instance not modifiable.
             ]]>
             </example>
        </member>
        <member name="P:Gekkota.Net.Field.Category">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> category.
            </summary>
            <value>
            One of the <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </value>
        </member>
        <member name="P:Gekkota.Net.Field.Id">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> id.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that identifies the
            <see cref="T:Gekkota.Net.Field"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is not between
            <see cref="F:System.UInt16.MinValue"/> and
            <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.IsPrimitive">
            <summary>
            Gets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Field"/> is primitive.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Field"/> is
            primitive; otherwise, <see langword="false"/>.
            </value>
            <seealso cref="T:Gekkota.Net.FieldType"/>
        </member>
        <member name="P:Gekkota.Net.Field.IsReadOnly">
            <summary>
            Specifies whether the <see cref="T:Gekkota.Net.Field"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Field"/> is
            read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Field.Size">
            <summary>
            Gets the <see cref="T:Gekkota.Net.Field"/> size.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> size, in bytes.
            </value>
        </member>
        <member name="P:Gekkota.Net.Field.Type">
            <summary>
            Gets the <see cref="T:Gekkota.Net.Field"/> type.
            </summary>
            <value>
            One of the <see cref="T:Gekkota.Net.FieldType"/> values.
            </value>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsByte">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as a
            <see cref="T:System.Byte"/>.
            </summary>
            <value>
            A <see cref="T:System.Byte"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to a
            <see cref="T:System.Byte"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsInt16">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as an
            <see cref="T:System.Int16"/>.
            </summary>
            <value>
            An <see cref="T:System.Int16"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to an
            <see cref="T:System.Int16"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsInt32">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as an
            <see cref="T:System.Int32"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to an
            <see cref="T:System.Int32"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsInt64">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as an
            <see cref="T:System.Int64"/>.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to an
            <see cref="T:System.Int64"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsSingle">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as a
            <see cref="T:System.Single"/>.
            </summary>
            <value>
            An <see cref="T:System.Single"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to an
            <see cref="T:System.Single"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsDouble">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as a
            <see cref="T:System.Double"/>.
            </summary>
            <value>
            An <see cref="T:System.Double"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Net.Field"/> value cannot be converted to an
            <see cref="T:System.Double"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsString">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as a
            <see cref="T:System.String"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
        </member>
        <member name="P:Gekkota.Net.Field.ValueAsByteArray">
            <summary>
            Gets or sets the <see cref="T:Gekkota.Net.Field"/> value as a
            <see cref="T:System.Byte"/> array.
            </summary>
            <value>
            A <see cref="T:System.Byte"/> array that represents the
            <see cref="T:Gekkota.Net.Field"/> value.
            </value>
        </member>
        <member name="T:Gekkota.Net.Field.ReadOnlyField">
            <summary>
            Implements a read-only wrapper for the
            <see cref="T:Gekkota.Net.Field"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Compression.ICompressionAlgorithm">
            <summary>
            Defines the basic operations of compression algorithms.
            </summary>
        </member>
        <member name="M:Gekkota.Compression.ICompressionAlgorithm.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses the specified region of the specified
            <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to
            compress.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes to
            compress.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the compressed data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less
            than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is out of bounds.
            <para>-or-</para>
            <paramref name="index"/> plus <paramref name="count"/> is
            greater than the length of <paramref name="data"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Compression.ICompressionAlgorithm.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the specified region of the specified
            <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to
            decompress.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes
            to decompress.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the decompressed
            data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less
            than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is out of bounds.
            <para>-or-</para>
            <paramref name="index"/> plus <paramref name="count"/> is
            greater than the length of <paramref name="data"/>.
            </exception>
        </member>
        <member name="T:Gekkota.Utilities.BoundsChecker">
            <summary>
            Provides methods for determining whether or not parameters like start
            index and count are inside the bounds of a given array.
            </summary>
        </member>
        <member name="M:Gekkota.Utilities.BoundsChecker.Check(System.String,System.Array,System.Int32)">
            <summary>
            Checks whether or not the specified index is inside the bounds of the
            specified array.
            </summary>
            <param name="arrayName">
            A <see cref="T:System.String"/> that contains the name of
            <paramref name="array"/>.
            </param>
            <param name="array">
            The array to check.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="array"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the length of
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Utilities.BoundsChecker.Check(System.String,System.Array,System.Int32,System.Int32)">
            <summary>
            Checks whether or not the specified index plus the specified count is
            inside the bounds of the specified array.
            </summary>
            <param name="arrayName">
            A <see cref="T:System.String"/> that contains the name of
            <paramref name="array"/>.
            </param>
            <param name="array">
            The array to check.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="array"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes to
            count.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the length of
            <paramref name="array"/>.
            <paramref name="index"/> plus <paramref name="count"/> is
            greater than the length of <paramref name="array"/>.
            </exception>
        </member>
        <member name="T:Gekkota.Checksums.ChecksumGenerator">
            <summary>
            Implements the Rocksoft(TM) Model CRC Algorithm.
            </summary>
            <remarks>
            The <c>ChecksumGenerator</c> class implements a generic, high
            performance, parameterizable CRC algorithm that can behave like any
            other native CRC algorithm.
            <note>
            More information about the Rocksoft(TM) Model CRC Algorithm is
            available at http://www.rocksoft.com/rocksoft/tutorial/.
            </note>
            </remarks>
            <example>
            The following example shows how to create and initialize a
            <c>ChecksumGenerator</c> and how to generate a 16-bit CRC.
            <code>
            <![CDATA[
            byte[] data = Encoding.UTF8.GetBytes("White");
            ChecksumGenerator checksumGenerator = new ChecksumGenerator(new Crc16());
            long crc = checksumGenerator.Generate(data, 0, data.Length);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Gekkota.Checksums.ChecksumGenerator.#ctor(Gekkota.Checksums.IChecksumModel)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> class with the
            specified model.
            </summary>
            <param name="model">
            An <see cref="T:Gekkota.Checksums.IChecksumModel"/> implementation
            that parameterizes the CRC algorithm.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="model"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Checksums.ChecksumGenerator.Generate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates the CRC for the specified data, according to the current
            <see cref="T:Gekkota.Checksums.IChecksumModel"/> implementation.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to process.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes to
            process.
            </param>
            <returns>
            An <see cref="T:System.UInt64"/> that represents the generated CRC.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less
            than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the length of
            <paramref name="data"/>.
            <para>-or-</para>
            <paramref name="index"/> plus <paramref name="count"/> is greater
            than the length of <paramref name="data"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Checksums.ChecksumGenerator.Reflect(System.Int64,System.Int32)">
            <summary>
            Reflects the lower <paramref name="bitCount"/> bits of
            <paramref name="bitStream"/>.
            </summary>
            <param name="bitStream">
            An <see cref="T:System.UInt64"/> that contains the bits to reflect.
            </param>
            <param name="bitCount">
            An <see cref="T:System.Int32"/> that represents the number of bits to
            reflect.
            </param>
            <returns>
            An <see cref="T:System.UInt64"/> that represents the reflection.
            </returns>
        </member>
        <member name="M:Gekkota.Checksums.ChecksumGenerator.CreateLookupTable">
            <summary>
            Creates the lookup table.
            </summary>
        </member>
        <member name="M:Gekkota.Checksums.ChecksumGenerator.Initialize(Gekkota.Checksums.IChecksumModel)">
            <summary>
            Initializes the <see cref="T:Gekkota.Checksums.ChecksumGenerator"/>
            with the specified model.
            </summary>
            <param name="model">
            An <see cref="T:Gekkota.Checksums.IChecksumModel"/> implementation
            that parameterizes the CRC algorithm.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="model"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Checksums.ChecksumGenerator.Model">
            <summary>
            Gets or sets the model that parameterizes the CRC algorithm.
            </summary>
            <value>
            An <see cref="T:Gekkota.Checksums.IChecksumModel"/> implementation
            that parameterizes the CRC algorithm.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Checksums.ChecksumGenerator.LookupTable">
            <summary>
            Gets the lookup table.
            </summary>
            <value>
            An <see cref="T:System.UInt64"/> array that represents the lookup
            table.
            </value>
            <remarks>
            Lookup tables provide a very efficient way to process data, since
            most of the calculation is precomputed and assembled into them.
            </remarks>
        </member>
        <member name="T:Gekkota.Net.FieldHeader">
            <summary>
            Represents a <see cref="T:Gekkota.Net.Field"/> header.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.IPClient">
             <summary>
             Provides Internet Protocol (IP) network services.
             </summary>
             <remarks>
             <c>IPClient</c> is the base class for any other IP-based network service
             providers.
             </remarks>
             <example>
             The following example shows how to create and initialize an
             <c>IPClient</c> that sends datagrams.
             <code>
             <![CDATA[
             using System;
             using System.Net;
             using Gekkota.Net;
             using Gekkota.Net.Sockets;
            
             public class Sender
             {
                 public static void Main(string[] args)
                 {
                     if (args.Length == 0) {
                         Console.WrileLine("Usage: Sender <hostname>");
                         Environment.Exit(0);
                     }
             
                     //
                     // create and initialize a new Datagram
                     //
                     Datagram datagram = new Datagram();
                     datagram.Add(new Field(1, "Red"));
                     datagram.Add(new Field(2, "Green"));
                     datagram.Add(new Field(3, "Blue"));
             
                     IPClient client = null;
             
                     try {
                         //
                         // create and initialize a new IPClient
                         //
                         client = new IPClient(args[0], 0);
             
                         //
                         // send the datagram
                         //
                         client.Send(datagram);
                     } finally {
                         if (client != null) client.Close();
                     }
                 }
             }
             ]]>
             </code>
             The following example shows how to create and initialize an
             <c>IPClient</c> that listens for incoming datagrams.
             <code>
             <![CDATA[
             using System;
             using System.Net;
             using System.Threading;
             using Gekkota.Net;
             using Gekkota.Net.Sockets;
            
             public class Receiver
             {
                 public static void Main()
                 {
                     IPClient client = null;
             
                     try {
                         //
                         // create and initialize a new IPClient
                         //
                         client = new IPClient();
                         client.Receive += new ReceiveEventHandler(OnReceive);
             
                         //
                         // create an infinite loop to keep the application alive
                         //
                         while (true) {
                             Thread.Sleep(0);
                         }
                     } finally {
                         if (client != null) client.Close();
                     }
                 }
             
                 private static void OnReceive(Object sender, ReceiveEventArgs args)
                 {
                     Console.WriteLine("Receiving datagram from {0}...",
                         args.RemoteEndPoint.Address);
             
                     foreach (Field field in args.Datagram) {
                         Console.WriteLine("Field {0}: {1}",
                             field.Id, field.ValueAsString);
                     }
                 }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Receiving datagram from 85.0.155.150...
                 Field 1: Red
                 Field 2: Green
                 Field 3: Blue
             ]]>
             </example> 
        </member>
        <member name="F:Gekkota.Net.Sockets.IPClient.MinTimeToLive">
            <summary>
            An <see cref="T:System.Int32"/> that represents the minimum time to
            live.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.IPClient.MaxTimeToLive">
            <summary>
            An <see cref="T:System.Int32"/> that represents the maximum time to
            live.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class with the specified
            addressing scheme.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="addressFamily"/> is neither
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> nor
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class and binds it to
            the specified local endpoint.
            </summary>
            <param name="localEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the local
            endpoint through which data is sent or received.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="localEndPoint"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class and establishes a
            default remote host using the specified host name and port number.
            </summary>
            <param name="hostname">
            A <see cref="T:System.String"/> that contains the DNS name of the
            remote host to which data should be sent.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the port number on
            the remote host to which data should be sent. If the current
            protocol does not support ports, this parameter is ignored.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="hostname"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and
            <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Do not use this constructor if you intend to receive multicasted
            datagrams.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class and binds it to
            the specified local port number.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the local port number
            through which data is sent or received. If the current protocol does
            not support ports, this parameter is ignored.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class with the
            specified addressing scheme and binds it to the specified local port
            number.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the local port number
            through which data is sent or received. If the current protocol does
            not support ports, this parameter is ignored.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="addressFamily"/> is neither
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> nor
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Finalize">
            <summary>
            Frees the resources used by the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/>.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Close">
            <summary>
            Terminates the <see cref="T:Gekkota.Net.Sockets.IPClient"/> and
            releases all the associated resources.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Establishes a default remote host using the specified endpoint.
            </summary>
            <param name="remoteEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the remote
            endpoint to which data should be sent.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="remoteEndPoint"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Do not call this method if you intend to receive multicasted
            datagrams.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Connect(System.String,System.Int32)">
            <summary>
            Establishes a default remote host using the specified host name and
            port number.
            </summary>
            <param name="hostname">
            A <see cref="T:System.String"/> that contains the DNS name of the
            remote host to which data should be sent.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the port number on
            the remote host to which data should be sent. If the current
            protocol does not support ports, this parameter is ignored.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="remoteEndPoint"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and
            <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Do not call this method if you intend to receive multicasted
            datagrams.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Establishes a default remote host using the specified IP address and
            port number.
            </summary>
            <param name="address">
            An <see cref="T:System.Net.IPAddress"/> that represents the IP
            address of the remote host to which data should be sent.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the port number on
            the remote host to which data should be sent. If the current
            protocol does not support ports, this parameter is ignored.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and
            <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Do not call this method if you intend to receive multicasted
            datagrams.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.DropMulticastGroup(System.Net.IPAddress)">
            <summary>
            Leaves the specified multicast group.
            </summary>
            <param name="multicastAddress">
            An <see cref="T:System.Net.IPAddress"/> that represents the multicast
            group to leave.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multicastAddress"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="multicastAddress"/> is not compatible with the
            addressing scheme of the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
            <summary>
            Leaves the specified multicast group for the local interface at the
            specified index.
            </summary>
            <param name="multicastAddress">
            An <see cref="T:System.Net.IPAddress"/> that represents the multicast
            group to leave.
            </param>
            <param name="ifindex">
            An <see cref="T:System.Int32"/> that represents the index of the
            local interface for which to leave the multicast group.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multicastAddress"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="ifindex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="multicastAddress"/> is not compatible with the
            addressing scheme of the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            Joins the specified multicast group.
            </summary>
            <param name="multicastAddress">
            An <see cref="T:System.Net.IPAddress"/> that represents the multicast
            group to join.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multicastAddress"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="multicastAddress"/> is not compatible with the
            addressing scheme of the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
            <summary>
            Joins the specified multicast group with the specified time to live.
            </summary>
            <param name="multicastAddress">
            An <see cref="T:System.Net.IPAddress"/> that represents the multicast
            group to join.
            </param>
            <param name="timeToLive">
            An <see cref="T:System.Int32"/> that represents the number of router
            hops a datagram is allowed to traverse before it is terminated.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multicastAddress"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="multicastAddress"/> is not compatible with the
            addressing scheme of the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeToLive"/> is not between
            <see cref="F:Gekkota.Net.Sockets.IPClient.MinTimeToLive"/> and
            <see cref="F:Gekkota.Net.Sockets.IPClient.MaxTimeToLive"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
            <summary>
            Joins the specified multicast group for the local interface at the
            specified index.
            </summary>
            <param name="ifindex">
            An <see cref="T:System.Int32"/> that represents the index of the
            local interface for which to join the multicast group.
            </param>
            <param name="multicastAddress">
            An <see cref="T:System.Net.IPAddress"/> that represents the multicast
            group to join.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multicastAddress"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="ifindex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="multicastAddress"/> is not compatible with the
            addressing scheme of the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.GetHashCode">
            <summary>
            Returns the hash code for this instance of the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> class.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code
            generated from 
            </returns>
            <remarks>
            The default implementation of the <c>GetHashCode</c> method
            returns a hash code generated from
            <see cref="P:Gekkota.Net.Sockets.IPClient.ProtocolName"/>.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Send(Gekkota.Net.Datagram)">
            <summary>
            Sends the specified <see cref="T:Gekkota.Net.Datagram"/> to the
            default remote host.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to send.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="datagram"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A default remote host has not been established.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during serialization of
            <paramref name="datagram"/>. Refer to the inner exception for more
            details.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            <see cref="P:Gekkota.Net.Sockets.IPClient.SendTimeout"/> has elapsed.
            <para>-or-</para>
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Send(Gekkota.Net.Datagram,System.Net.IPEndPoint)">
            <summary>
            Sends the specified <see cref="T:Gekkota.Net.Datagram"/> to the host
            at the specified remote endpoint.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to send.
            </param>
            <param name="remoteEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the remote
            host and port number to which to send the Datagram.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="datagram"/> is <see langword="null"/>.
            <para>-or-</para>
            <paramref name="remoteEndPoint"/> is <see langword="null"/> and a
            default remote host has not been established.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="remoteEndPoint"/> is not <see langword="null"/> and
            a default host has been already established.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during serialization of
            <paramref name="datagram"/>. Refer to the inner exception for more
            details.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            <see cref="P:Gekkota.Net.Sockets.IPClient.SendTimeout"/> has elapsed.
            <para>-or-</para>
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Send(Gekkota.Net.Datagram,System.String,System.Int32)">
            <summary>
            Sends the specified <see cref="T:Gekkota.Net.Datagram"/> to the
            specified port on the specified remote host.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to send.
            </param>
            <param name="hostname">
            A <see cref="T:System.String"/> that contains the name of the remote
            host to which <paramref name="datagram"/> should be sent.
            </param>
            <param name="port">
            The remote port number with which to communicate.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="datagram"/> or <paramref name="hostname"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and
            <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A default remote host has been already established.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during serialization of
            <paramref name="datagram"/>. Refer to the inner exception for more
            details.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            <see cref="P:Gekkota.Net.Sockets.IPClient.SendTimeout"/> has elapsed.
            <para>-or-</para>
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.System#IDisposable#Dispose">
            <summary>
            Terminates the <see cref="T:Gekkota.Net.Sockets.IPClient"/> and
            releases all the associated resources.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.CreateClient(System.Net.Sockets.AddressFamily)">
            <summary>
            Returns a network <see cref="T:System.Net.Sockets.Socket"/> that uses
            IP as the communication protocol.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <returns>
            A <see cref="T:System.Net.Sockets.Socket"/> that uses IP as the
            communication protocol.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/>, and optionally disposes
            off the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged
            resources; <see langword="false"/> to release only unmanaged
            resources.
            </param>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnDeserialize(System.Byte[],System.Int32,Gekkota.Net.Field@)">
            <summary>
            Performs additional custom processes before deserializing the
            specified array of bytes.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the
            <see cref="T:Gekkota.Net.Datagram"/> to deserialize.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="manifest">
            A <see cref="T:Gekkota.Net.Field"/> that represents the manifest
            generated for <paramref name="data"/>.
            </param>
            <returns>
            An <see cref="T:System.Int32"/> that represents the starting position
            of the payload within <paramref name="data"/>, or -1 if
            <paramref name="data"/> cannot be interpreted by the current protocol.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <remarks>
            The default implementation of the <c>OnDeserialize</c> method checks
            whether or not the specified byte array contains an IP datagram, and
            if it does, returns the starting position of the payload. Derived
            classes can override the <c>OnDeserialize</c> method to perform
            additional filtering operations.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnDeserializeComplete(System.Byte[],System.Int32,Gekkota.Net.Datagram)">
            <summary>
            Performs additional custom processes after deserializing the
            specified array of bytes.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the
            <see cref="T:Gekkota.Net.Datagram"/> to deserialize.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="datagram">
            The deserialized <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <returns>
            A <see cref="T:Gekkota.Net.Datagram"/> array that contains the
            deserialized <see cref="T:Gekkota.Net.Datagram"/>.
            </returns>
            <remarks>
            The default implementation of the <c>OnDeserializeComplete</c> method
            does nothing. Derived classes can override it to perform some action
            after the specified <see cref="T:Gekkota.Net.Datagram"/> is
            deserialized.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnJoinListener">
            <summary>
            Performs additional custom processes before the Listener is
            terminated.
            </summary>
            <remarks>
            The default implementation of the <c>OnJoinListener</c> method does
            nothing. Derived classes can override it to perform some action
            before the Listener is terminated.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnListen(System.Byte[],System.Net.EndPoint)">
            <summary>
            Provides default processing for incoming datagrams.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to
            process.
            </param>
            <param name="remoteEndPoint">
            An <see cref="T:System.Net.EndPoint"/> that represents the remote
            endpoint from which <paramref name="data"/> was sent.
            </param>
            <remarks>
            The Listener invokes the <c>OnListen</c> method whenever new
            datagrams arrive.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnSerialize(Gekkota.Net.Datagram)">
            <summary>
            Performs additional custom processes before serializing the
            specified <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to serialize.
            </param>
            <returns>
            The <see cref="T:Gekkota.Net.Datagram"/> to serialize.
            </returns>
            <remarks>
            The default implementation of the <c>OnSerialize</c> method does
            nothing. Derived classes can override it to perform some action
            before the specified <see cref="T:Gekkota.Net.Datagram"/> is
            serialized.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnSerializeComplete(Gekkota.Net.Datagram,System.Byte[])">
            <summary>
            Performs additional custom processes after serializing the specified
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to serialize.
            </param>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the serialized
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the serialized
            <see cref="T:Gekkota.Net.Datagram"/>.
            </returns>
            <remarks>
            The default implementation of the <c>OnSerializeComplete</c> method
            does nothing. Derived classes can override it to perform some action
            after the specified <see cref="T:Gekkota.Net.Datagram"/> is
            serialized.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.OnValidate(Gekkota.Net.Datagram)">
            <summary>
            Performs additional custom processes when validating the specified
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to validate.
            </param>
            <remarks>
            The default implementation of the <c>OnValidate</c> method does
            nothing. Derived classes can override it to perform some action when
            the specified <see cref="T:Gekkota.Net.Datagram"/> is validated.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.CheckIfDisposed">
            <summary>
            Checks whether or not the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            has been terminated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Deserialize(System.Byte[],System.Int32)">
            <summary>
            Deserializes the specified byte array into a
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="data">
            The <see cref="T:System.Byte"/> array from which to deserialize the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <returns>
            A <see cref="T:Gekkota.Net.Datagram"/> array that contains the
            deserialized <see cref="T:Gekkota.Net.Datagram"/>, if
            <paramref name="data"/> is interpretable by this protocol; otherwise,
            <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during deserialization of
            <paramref name="data"/>. Refer to the inner exception for more
            details.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Serialize(Gekkota.Net.Datagram)">
            <summary>
            Serializes the specified <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to serialize.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the serialized
            <see cref="T:Gekkota.Net.Datagram"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="datagram"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during serialization of
            <paramref name="datagram"/>. Refer to the inner exception for more
            details.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Sends the specified <see cref="T:System.Byte"/> array to the host
            at the specified remote endpoint.
            </summary>
            <param name="data">
            The <see cref="T:System.Byte"/> array to send.
            </param>
            <param name="remoteEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the remote
            host and port number to which to send the data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            <para>-or-</para>
            <paramref name="remoteEndPoint"/> is <see langword="null"/> and a
            default remote host has not been established.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="remoteEndPoint"/> is not <see langword="null"/> and
            a default host has been already established.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            An error has occurred during serialization of
            <paramref name="data"/>. Refer to the inner exception for more
            details.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            <see cref="P:Gekkota.Net.Sockets.IPClient.SendTimeout"/> has elapsed.
            <para>-or-</para>
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.CreateManifest(Gekkota.Net.Datagram)">
            <summary>
            Creates a manifest for the specified
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> for which the manifest
            should be created.
            </param>
            <returns>
            A <see cref="T:Gekkota.Net.Field"/> that represents the manifest.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.CreatePayloadDescriptor">
            <summary>
            Creates the payload descriptor.
            </summary>
            <remarks>
            The <c>CreatePayloadDescriptor</c> method creates a payload
            descriptor for the current protocol by reflecting its metafields.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.GetManifest(System.Byte[],System.Int32)">
            <summary>
            Extracts and returns the manifest embeded in the specified
            <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the manifest to
            extract.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <returns>
            A <see cref="T:Gekkota.Net.Field"/> that represents the manifest
            extracted from <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Initialize(System.Net.IPEndPoint)">
            <summary>
            Initializes the underlying network
            <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="localEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the local
            endpoint through which data is sent or received.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred during <see cref="T:System.Net.Sockets.Socket"/>
            initialization.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.JoinListener">
            <summary>
            Starts the Listener if not already started and if at least one
            delegate is registered for the Receive event.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.LeaveListener">
            <summary>
            Stops the Listener if not already stopped and if no delegates are
            registered for the Receive event.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Listen">
            <summary>
            Listens for incoming datagrams.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.IPClient.Validate(Gekkota.Net.Datagram)">
            <summary>
            Validates the specified <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <param name="datagram">
            The <see cref="T:Gekkota.Net.Datagram"/> to validate.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="datagram"/> is empty.
            <para>-or-</para>
            <paramref name="datagram"/> is not valid.
            </exception>
        </member>
        <member name="E:Gekkota.Net.Sockets.IPClient.Exception">
            <summary>
            Occurs when an exception is thrown.
            </summary>
        </member>
        <member name="E:Gekkota.Net.Sockets.IPClient.Receive">
            <summary>
            Occurs when a <see cref="T:Gekkota.Net.Datagram"/> is received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            There was an attempt to register or unregister an event handler
            even if the <see cref="T:Gekkota.Net.Sockets.IPClient"/> has already
            been terminated.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.BroadcastEnabled">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> is allowed to Broadcast
            datagrams.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            is allowed to broadcast datagrams; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.DontFragment">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> should fragment outgoing
            datagrams.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            should not fragment outgoing datagrams; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.EmbedMetadata">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> should embed metadata
            in outgoing datagrams.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            should embed metadata in outgoing datagrams; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.        /// </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.IsDisposed">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been disposed off.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            has been disposed off; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>
            The <see cref="T:System.Net.IPEndPoint"/> that the underlying
            <see cref="T:System.Net.Sockets.Socket"/> is using for communicating.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.IPOptions">
            <summary>
            Gets or sets IP options to be inserted into outgoing datagrams.
            </summary>
            <value>
            A <see cref="T:System.Byte"/> array that specifies IP options to be
            inserted into outgoing datagrams.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.PollTimeout">
            <summary>
            Gets or sets the time to wait for a response when polling for
            incoming datagrams.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the time, in
            milliseconds, to wait for a response when polling for incoming
            datagrams.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than 0.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.ProtocolName">
            <summary>
            Gets the protocol name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the protocol name.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.ReceiveBufferSize">
            <summary>
            Gets or sets the total buffer space reserved for receives.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the total buffer
            space reserved for receives. The default value is 32768 bytes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Incoming datagrams that do not fit in the
            <see cref="T:System.Net.Sockets.Socket"/> receive buffer are discarded.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.ReceiveTimeout">
            <summary>
            Gets or sets the maximum time the listener will block when
            attempting to receive data.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the maximum time, in
            milliseconds, the listener will block when attempting to receive
            data. The default is 0, which means the timeout is disabled.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            If the <c>ReceiveTimeout</c> property is set to a value greater than
            0 and data is not received within this time, a
            <see cref="T:System.Net.Sockets.SocketException"/> exception is thrown.
            <para>
            The <c>ReceiveTimeout</c> property has effect only if there are
            registered delegates for the Receive event.
            </para>
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>
            The <see cref="T:System.Net.IPEndPoint"/> with which the underlying
            <see cref="T:System.Net.Sockets.Socket"/> is communicating.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.SendBufferSize">
            <summary>
            Gets or sets the total buffer space reserved for sends.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the total buffer
            space reserved for sends. The default value is 8192 bytes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            IP sockets do not have a real send buffer; this property just
            represents the upper limit on the maximum-sized IP Datagram that can
            be written on the <see cref="T:System.Net.Sockets.Socket"/>.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.SendTimeout">
            <summary>
            Gets or sets the maximum time the
            <see cref="M:Gekkota.Net.Sockets.IPClient.Send(Gekkota.Net.Datagram)"/>
            method will block when attempting to send data.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the maximum time, in
            milliseconds, the <see cref="M:Gekkota.Net.Sockets.IPClient.Send(Gekkota.Net.Datagram)"/>
            method will block when attempting to send data. The default is 0,
            which means the timeout is disabled.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            If the <c>SendTimeout</c> property is set to a value greater than 0
            and data is not sent within this time, a
            <see cref="T:System.Net.Sockets.SocketException"/> exception is thrown.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> between
            <see cref="F:Gekkota.Net.Sockets.IPClient.MinTimeToLive"/> and
            <see cref="F:Gekkota.Net.Sockets.IPClient.MaxTimeToLive"/> that
            represents the number of router hops a
            <see cref="T:Gekkota.Net.Datagram"/> is allowed to traverse before it
            is terminated. The default value is 60.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is not between
            <see cref="F:Gekkota.Net.Sockets.IPClient.MinTimeToLive"/> and
            <see cref="F:Gekkota.Net.Sockets.IPClient.MaxTimeToLive"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.TypeOfService">
            <summary>
            Gets or sets the type of service.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the type of service.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.UseLoopback">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.IPClient"/> should bypass the
            hardware when possible.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.IPClient"/>
            should bypass the hardware when possible; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.IPClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.DefaultMetafield">
            <summary>
            Gets the default <see cref="T:Gekkota.Net.Field"/> descriptor.
            </summary>
            <value>
            A <see cref="T:Gekkota.Net.Metafield"/> that describes the protocol
            payload as a unique <see cref="T:System.Byte"/> array.
            </value>
            <remarks>
            The default <see cref="T:Gekkota.Net.Field"/> descriptor is used to
            interpret datagrams when the
            <see cref="P:Gekkota.Net.Sockets.IPClient.EmbedMetadata"/> property
            is set to <see langword="false"/> and the
            <see cref="T:Gekkota.Net.ProtocolFieldAttribute"/> is not applied to
            any custom <see cref="T:Gekkota.Net.Field"/> descriptors.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.Active">
            <summary>
            Gets or sets a value indicating whether or not a default remote host
            has been establilshed.
            </summary>
            <value>
            <see langword="true" /> if a connection is active; otherwise,
            <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.Client">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>
            The underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </value>
            <remarks>
            Derived classes can provide their own network
            <see cref="T:System.Net.Sockets.Socket"/> by overriding the
            <see cref="M:Gekkota.Net.Sockets.IPClient.CreateClient(System.Net.Sockets.AddressFamily)"/> method.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.BaseOverhead">
            <summary>
            Gets the overhead generated by TCP/IP headers.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the overhead
            generated by TCP/IP headers, in bytes.
            </value>
            <remarks>
            The <c>BaseOverhead</c> property does not include overhead produced
            by metadata.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.ChecksumGenerator">
            <summary>
            Gets the underlying <see cref="T:Gekkota.Checksums.ChecksumGenerator"/>.
            </summary>
            <value>
            The underlying <see cref="T:Gekkota.Checksums.ChecksumGenerator"/>.
            </value>
            <remarks>
            <see cref="P:Gekkota.Net.Sockets.IPClient.ChecksumGenerator"/>
            generates 16-bit CRCs.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.MaxDatagramSize">
            <summary>
            Gets the maximum <see cref="T:Gekkota.Net.Datagram"/> size.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the maximum
            <see cref="T:Gekkota.Net.Datagram"/> size, in bytes.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.IPClient.PayloadDescriptor">
            <summary>
            Gets the protocol payload descriptor.
            </summary>
            <value>
            The protocol payload descriptor.
            </value>
        </member>
        <member name="T:Gekkota.Net.Sockets.IPClient.PositionComparer">
            <summary>
            Compares two metafields for position equivalence.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.IPClient.IdComparer">
            <summary>
            Compares two fields for id equivalence.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.BandwidthManager">
            <summary>
            Provides functionaltiy for managing bandwidth usage. This class cannot
            be inherited.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.BandwidthManager.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.BandwidthManager"/> class.
            </summary>
            <remarks>
            This constructor sets <see cref="P:Gekkota.Net.Sockets.BandwidthManager.Bandwidth"/>
            to <see cref="F:Gekkota.Net.Sockets.Bandwidth.Full"/>.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.BandwidthManager.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Sockets.BandwidthManager"/>
            class with the specified bandwidth.
            </summary>
            <param name="bandwidth">
            An <see cref="T:System.Int64"/> that represents the number of bits
            that can pass through per second.
            </param>
        </member>
        <member name="M:Gekkota.Net.Sockets.BandwidthManager.Throttle(System.Int32)">
            <summary>
            Suspends the current thread for the time window required to respect
            the set bandwidth. The time window is calculated in function of the
            given buffer length and the set bandwidth.
            </summary>
            <param name="bufferLength">
            An <see cref="T:System.Int32"/> that represents the buffer length, in
            bytes, for which the set bandwidth should be respected.
            </param>
            <returns>
            An <see cref="T:System.Int64"/> that represents the number of ticks
            the current thread has been suspended. 1 tick corresponds to 10e-7
            seconds.
            </returns>
        </member>
        <member name="P:Gekkota.Net.Sockets.BandwidthManager.Bandwidth">
            <summary>
            Gets or sets the bandwidth.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the number of bits
            that can pass through per second.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than 0
            </exception>
        </member>
        <member name="T:Gekkota.Security.Cryptography.CryptoService">
            <summary>
            Defines crypto service values for the
            <see cref="M:Gekkota.Security.Cryptography.CryptoServiceProvider.Transform(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.ICryptoTransform,Gekkota.Security.Cryptography.CryptoService)"/>
            method.
            </summary>
            <seealso cref="T:Gekkota.Security.Cryptography.CryptoServiceProvider"/>
        </member>
        <member name="F:Gekkota.Security.Cryptography.CryptoService.Encrypt">
            <summary>
            The
            <see cref="M:Gekkota.Security.Cryptography.CryptoServiceProvider.Transform(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.ICryptoTransform,Gekkota.Security.Cryptography.CryptoService)"/>
            method provides encryption services.
            </summary>
        </member>
        <member name="F:Gekkota.Security.Cryptography.CryptoService.Decrypt">
            <summary>
            The
            <see cref="M:Gekkota.Security.Cryptography.CryptoServiceProvider.Transform(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.ICryptoTransform,Gekkota.Security.Cryptography.CryptoService)"/>
            method provides decryption services.
            </summary>
        </member>
        <member name="T:Gekkota.Compression.CompressionLevel">
            <summary>
            Defines compression level values.
            </summary>
            <seealso cref="T:Gekkota.Net.Field"/>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.Fastest">
            <summary>
            Fastest processing speed and worst compression ratio.
            </summary>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.VeryFast">
            <summary>
            Very fast processing speed and near worst compression ratio.
            </summary>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.Fast">
            <summary>
            Fast processing speed and fairly good compression ratio.
            </summary>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.Good">
            <summary>
            Good compression ratio and fairly fast processing speed.
            </summary>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.VeryGood">
            <summary>
            Very good compression ratio and near slowest processing speed.
            </summary>
        </member>
        <member name="F:Gekkota.Compression.CompressionLevel.Best">
            <summary>
            Best compression ratio and slowest processing speed.
            </summary>
        </member>
        <member name="T:Gekkota.HashCodeGenerator">
            <summary>
            Provides functionality for generating 16-bit hash codes from character
            strings.
            </summary>
            <remarks>
            <see cref="T:Gekkota.HashCodeGenerator"/> implements the PJ Weinberger's
            rolling shift algorithm.
            </remarks>
        </member>
        <member name="M:Gekkota.HashCodeGenerator.Generate(System.String)">
            <summary>
            Generates a 16-bit hash code from the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> from which to generate the hash code.
            </param>
            <returns>
            An <see cref="T:System.Int16"/> that represents the generated hash
            code. If <paramref name="value"/> is <see langword="null"/> or its
            length is 0, then this method returns 0.
            </returns>
            <example>
            The following example demonstrates the <c>Generate</c> method using
            the input character string as it is.
            <code>
            <![CDATA[
            int hashCode = HashCodeGenerator("Red");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Gekkota.HashCodeGenerator.Generate(System.String,Gekkota.CasingRule)">
            <summary>
            Generates a 16-bit hash code from the specified <see cref="T:System.String"/>
            using the specified casing rule.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> from which to generate the hash code.
            </param>
            <param name="casingRule">
            One of the <see cref="T:Gekkota.CasingRule"/> values.
            </param>
            <returns>
            An <see cref="T:System.Int16"/> that represents the generated hash
            code. If <paramref name="source"/> is <see langword="null"/> or its
            length is 0, then this method returns 0.
            </returns>
            <example>
            The following example demonstrates the <c>Generate</c> method using
            the input character string in uppercase.
            <code>
            <![CDATA[
            int hashCode = HashCodeGenerator("Red", CasingRule.ToUpper);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Gekkota.Checksums.IChecksumModel">
            <summary>
            Parameterizes the CRC algorithm implemented by the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/>.
            </summary>
            <remarks>
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> implements the
            Rocksoft(TM) Model CRC Algorithm.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.Name">
            <summary>
            Gets the algorithm name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the algorithm name.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.Width">
            <summary>
            Gets the algorithm width.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the algorithm width,
            in bits.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.Polynom">
            <summary>
            Gets the polynom.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the polynom.
            </value>
            <remarks>
            The <c>Polynom</c> property represents the unreflected polynom, and
            its bottom bit is always the LSB of the divisor regardless whether
            or not the algorithm is reflected.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.Initial">
            <summary>
            Gets the initial CRC value when the algorithm starts.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the initial CRC value
            when the algorithm starts.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.InputReflected">
            <summary>
            Gets a value indicating whether or not input bytes are processed
            with bit 0 being treated as the most significant bit (MSB) and bit 7
            being treated as the least significant bit (LSB).
            </summary>
            <value>
            <see langword="true" /> if input bytes have to be reflected;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.OutputReflected">
            <summary>
            Gets a value indicating whether or not the calculated CRC should to
            be reflected before it is XORed.
            </summary>
            <value>
            <see langword="true" /> if the calculated CRC should be reflected
            before it is XORed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.IChecksumModel.XorOutput">
            <summary>
            Gets value that should be XORed to the calculated CRC before it is
            returned.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the value that should
            be XORed to the calculated CRC before it is returned.
            </value>
        </member>
        <member name="T:Gekkota.Checksums.Crc16">
            <summary>
            Parameterizes the CRC algorithm implemented by the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> to make it behave as
            the CRC16 algorithm.
            </summary>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.Name">
            <summary>
            Gets the algorithm name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the algorithm name.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.Width">
            <summary>
            Gets the algorithm width.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the algorithm width,
            in bits.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.Polynom">
            <summary>
            Gets the polynom.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the polynom.
            </value>
            <remarks>
            The <c>Polynom</c> property represents the unreflected polynom, and
            its bottom bit is always the LSB of the divisor regardless whether
            or not the algorithm is reflected.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.Initial">
            <summary>
            Gets the initial CRC value when the algorithm starts.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the initial CRC value
            when the algorithm starts.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.InputReflected">
            <summary>
            Gets a value indicating whether or not input bytes are processed
            with bit 0 being treated as the most significant bit (MSB) and bit 7
            being treated as the least significant bit (LSB).
            </summary>
            <value>
            <see langword="true" /> if input bytes have to be reflected;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.OutputReflected">
            <summary>
            Gets a value indicating whether or not the calculated CRC should to
            be reflected before it is XORed.
            </summary>
            <value>
            <see langword="true" /> if the calculated CRC should be reflected
            before it is XORed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc16.XorOutput">
            <summary>
            Gets value that should be XORed to the calculated CRC before it is
            returned.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the value that should
            be XORed to the calculated CRC before it is returned.
            </value>
        </member>
        <member name="T:Gekkota.Net.FieldSerializer">
            <summary>
            Serializes and deserializes <see cref="T:Gekkota.Net.Field"/> objects
            into and from byte arrays. This class cannot be inherited.
            </summary>
            <remarks>
            When serializing or deserializing primitive data types, the byte order
            is adjusted automatically so that they can be used by a program or
            sent over a network without further transformations.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.FieldSerializer.Deserialize(System.Byte[],System.Int32)">
             <summary>
             Deserializes the specified byte array into a
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="data">
             A <see cref="T:System.Byte"/> array from which to deserialiize the
             <see cref="T:Gekkota.Net.Field"/>.
             </param>
             <param name="index">
             An <see cref="T:System.Int32"/> that represents the starting position
             within <paramref name="data"/>.
             </param>
             <returns>
             The <see cref="T:Gekkota.Net.Field"/> deserialized from
             <paramref name="data"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="data"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="data"/>.
             </exception>
             <example>
             The following example shows how to deserialize a byte array that
             contains metadata into a <c>Field</c>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
             byte[] serializedField = new byte[field.Size + Metafield.LayoutSize];
            
             //
             // serialize and deserialize the Field with metadata
             //
             FieldSerializer.Serialize(field, serializedField, 0, true);
             Field deserializedField = FieldSerializer.Deserialize(serializedField, 0);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Gekkota.Net.FieldSerializer.Deserialize(System.Byte[],System.Int32,Gekkota.Net.Metafield)">
             <summary>
             Deserializes the specified byte array into a
             <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <param name="data">
             A <see cref="T:System.Byte"/> array from which to deserialize the
             <see cref="T:Gekkota.Net.Field"/>.
             </param>
             <param name="index">
             An <see cref="T:System.Int32"/> that represents the starting position
             within <paramref name="data"/>.
             </param>
             <param name="metafield">
             A <see cref="T:Gekkota.Net.Metafield"/> that describes the
             <see cref="T:Gekkota.Net.Field"/> to deserialize.
             </param>
             <returns>
             The <see cref="T:Gekkota.Net.Field"/> deserialized from
             <paramref name="data"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="data"/> or <paramref name="metafield"/> is
             <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="startIndex"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="data"/>.
             </exception>
             <example>
             The following example shows how to deserialize a byte array that
             does not contain metadata into a <c>Field</c>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
             byte[] serializedField = new byte[field.Size];
            
             //
             // serialize and deserialize the Field without metadata
             //
             FieldSerializer.Serialize(field, serializedField, 0, false);
             Field deserializedField = FieldSerializer.Deserialize(
                 serializedField, 0, field.GetMetafield());
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Gekkota.Net.FieldSerializer.Serialize(Gekkota.Net.Field,System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Serializes the specified <see cref="T:Gekkota.Net.Field"/> into the
             given byte array.
             </summary>
             <param name="field">
             The <see cref="T:Gekkota.Net.Field"/> to serialize.
             </param>
             <param name="data">
             A <see cref="T:System.Byte"/> array into which <paramref name="field"/>
             is to be serialized.
             </param>
             <param name="index">
             An <see cref="T:System.Int32"/> that represents the starting position
             within <paramref name="data"/>.
             </param>
             <param name="embedMetadata">
             A <see cref="T:System.Boolean"/> value indicating whether or not
             <paramref name="field"/> has to be serialized with metadata.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="field"/> or <paramref name="data"/> is
             <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="data"/>.
             </exception>
             <example>
             The following example shows how to serialize a <c>Field</c>into a
             byte array.
             <code>
             <![CDATA[
             //
             // create and initialize a new Field
             //
             Field field = new Field(1, Int32.MaxValue);
             byte[] serializedField1 = new byte[field.Size + Metafield.LayoutSize];
             byte[] serializedField2 = new byte[field.Size];
            
             //
             // serialize the Field with metadata
             //
             FieldSerializer.Serialize(field, serializedField1, 0, true);
            
             //
             // serialize the Field without metadata
             //
             FieldSerializer.Serialize(field, serializedField2, 0, false);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Gekkota.Net.FieldSerializer.Map(System.Byte[],Gekkota.Net.Metafield)">
            <summary>
            Maps the specified array of bytes into a
            <see cref="T:Gekkota.Net.Field"/>.
            </summary>
            <param name="data">
            The <see cref="T:System.Byte"/> array to map.
            </param>
            <param name="metafield">
            A <see cref="T:Gekkota.Net.Metafield"/> that describes the
            <see cref="T:Gekkota.Net.Field"/> to map.
            </param>
            <returns>
            The <see cref="T:Gekkota.Net.Field"/> mapped from <paramref name="data"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.FieldSerializer.Unmap(Gekkota.Net.Field)">
            <summary>
            Unmaps the specified <see cref="T:Gekkota.Net.Field"/> into an array
            of bytes.
            </summary>
            <param name="field">
            The <see cref="T:Gekkota.Net.Field"/> to unmap.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the unmapped
            <see cref="T:Gekkota.Net.Field"/>.
            </returns>
        </member>
        <member name="T:Gekkota.Security.Cryptography.ChangeKeyEventArgs">
            <summary>
            Provides data for the <c>ChangeKey</c> event.
            </summary>
        </member>
        <member name="M:Gekkota.Security.Cryptography.ChangeKeyEventArgs.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Security.Cryptography.ChangeKeyEventArgs"/>
            class with the specified secret key and initialization vector.
            </summary>
            <param name="key">
            A <see cref="T:System.Byte"/> array that contains the new secret key.
            </param>
            <param name="IV">
            A <see cref="T:System.Byte"/> array that contains the new
            initialization vector.
            </param>
        </member>
        <member name="P:Gekkota.Security.Cryptography.ChangeKeyEventArgs.NewKey">
            <summary>
            Gets the new secret key.
            </summary>
            <value>
            A <see cref="T:System.Byte"/> array that contains the new secret key.
            </value>
        </member>
        <member name="P:Gekkota.Security.Cryptography.ChangeKeyEventArgs.NewIV">
            <summary>
            Gets the new initialization vector.
            </summary>
            <value>
            A <see cref="T:System.Byte"/> array that contains the new
            initialization vector.
            </value>
        </member>
        <member name="T:Gekkota.Net.FieldEnumerator">
            <summary>
            Provides a simple iteration mechanism over a
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
        </member>
        <member name="M:Gekkota.Net.FieldEnumerator.#ctor(Gekkota.Net.Datagram)">
            <summary>
            Gets the current <see cref="T:Gekkota.Net.Field"/> in the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </summary>
            <value>
            The current <see cref="T:Gekkota.Net.Field"/> in the
            <see cref="T:Gekkota.Net.Datagram"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first
            <see cref="T:Gekkota.Net.Field"/> of the
            <see cref="T:Gekkota.Net.Datagram"/> or after the last
            <see cref="T:Gekkota.Net.Field"/>.
            </exception>
        </member>
        <member name="T:Gekkota.Net.Sockets.ExceptionEventHandler">
            <summary>
            Represents the method that handles the
            <see cref="E:Gekkota.Net.Sockets.IPClient.Exception"/> event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="args">
            An <see cref="T:Gekkota.Net.Sockets.ExceptionEventArgs"/> that contains
            the event data.
            </param>
        </member>
        <member name="T:Gekkota.Checksums.Xmodem">
            <summary>
            Parameterizes the CRC algorithm implemented by the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> to make it behave as
            the XMODEM algorithm.
            </summary>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.Name">
            <summary>
            Gets the algorithm name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the algorithm name.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.Width">
            <summary>
            Gets the algorithm width.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the algorithm width,
            in bits.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.Polynom">
            <summary>
            Gets the polynom.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the polynom.
            </value>
            <remarks>
            The <c>Polynom</c> property represents the unreflected polynom, and
            its bottom bit is always the LSB of the divisor regardless whether
            or not the algorithm is reflected.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.Initial">
            <summary>
            Gets the initial CRC value when the algorithm starts.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the initial CRC value
            when the algorithm starts.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.InputReflected">
            <summary>
            Gets a value indicating whether or not input bytes are processed
            with bit 0 being treated as the most significant bit (MSB) and bit 7
            being treated as the least significant bit (LSB).
            </summary>
            <value>
            <see langword="true" /> if input bytes have to be reflected;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.OutputReflected">
            <summary>
            Gets a value indicating whether or not the calculated CRC should to
            be reflected before it is XORed.
            </summary>
            <value>
            <see langword="true" /> if the calculated CRC should be reflected
            before it is XORed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Xmodem.XorOutput">
            <summary>
            Gets value that should be XORed to the calculated CRC before it is
            returned.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the value that should
            be XORed to the calculated CRC before it is returned.
            </value>
        </member>
        <member name="T:Gekkota.CasingRule">
            <summary>
            Defines casing rules for the
            <see cref="M:Gekkota.HashCodeGenerator.Generate(System.String,Gekkota.CasingRule)"/>
            method.
            </summary>
            <seealso cref="T:Gekkota.HashCodeGenerator"/>
        </member>
        <member name="F:Gekkota.CasingRule.None">
            <summary>
            The <see cref="T:System.String"/> is hashed as it is.
            </summary>
        </member>
        <member name="F:Gekkota.CasingRule.ToUpper">
            <summary>
            The <see cref="T:System.String"/> is hashed in uppercase.
            </summary>
        </member>
        <member name="F:Gekkota.CasingRule.ToLower">
            <summary>
            The <see cref="T:System.String"/> is hashed in lowercase.
            </summary>
        </member>
        <member name="T:Gekkota.Net.FieldType">
            <summary>
            Defines <see cref="T:Gekkota.Net.Field"/> type values.
            </summary>
            <seealso cref="T:Gekkota.Net.Field"/>
        </member>
        <member name="F:Gekkota.Net.FieldType.Undefined">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> contains undefined data.
            </summary>
        </member>
        <member name="F:Gekkota.Net.FieldType.Integral">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> contains an integral number.
            </summary>
            <remarks>
            Integral numbers include int8, int16, int32, and int64.
            </remarks>
        </member>
        <member name="F:Gekkota.Net.FieldType.FloatingPoint">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> contains a floating point number.
            </summary>
            <remarks>
            Floating point numbers include float32 and float64.
            </remarks>
        </member>
        <member name="F:Gekkota.Net.FieldType.String">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> contains an utf-8 character
            string.
            </summary>
        </member>
        <member name="F:Gekkota.Net.FieldType.ByteArray">
            <summary>
            The <see cref="T:Gekkota.Net.Field"/> contains a raw byte array.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.ExceptionEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Gekkota.Net.Sockets.IPClient.Exception"/> event.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.ExceptionEventArgs"/> class with the
            specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">
            The raised <see cref="T:System.Exception"/>.
            </param>
        </member>
        <member name="P:Gekkota.Net.Sockets.ExceptionEventArgs.Exception">
            <summary>
            Gets the raised Exception.
            </summary>
            <value>
            The raised <see cref="T:System.Exception"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.ExceptionEventArgs.TimeStamp">
            <summary>
            Gets the time the <see cref="T:System.Exception"/> was raised.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time the
            <see cref="T:System.Exception"/> was raised.
            </value>
        </member>
        <member name="T:Gekkota.Compression.LZF">
             <summary>
             Implements the LZF compression algorithm. This class cannot be inherited.
             </summary>
             <example>
             The following example shows how to create and initialize a <c>LZF</c>
             compression algorithm that deflates and inflates a byte array.
             <code>
             <![CDATA[
             using System;
             using System.Text;
             using Gekkota.Compression;
            
             public class Deflater
             {
                 public static void Main(string[] args)
                 {
                     if (args.Length == 0) {
                         Console.WriteLine("Usage: Deflater <string>");
                         Environment.Exit(0);
                     }
            
                     //
                     // create and initialize a new LZF compression algorithm
                     // with fastest processing speed
                     //
                     LZF lzf = new LZF(CompressionLevel.Fastest);
                     byte[] data = Encoding.UTF8.GetBytes(args[0]);
                     byte[] deflated = lzf.Deflate(data, 0, data.Length);
                     byte[] inflated = lzf.Inflate(deflated, 0, deflated.Length);
             
                     Console.WriteLine("Compressing \"{0}\" saves {1} bytes.",
                         args[0], inflated.Length - deflated.Lenght);
                 }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Compressing "To be, or not to be: that is the question." saves 4 bytes.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Compression.LZF.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.LZF"/> class.
            </summary>
        </member>
        <member name="M:Gekkota.Compression.LZF.#ctor(Gekkota.Compression.CompressionLevel)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Compression.LZF"/> class with the specified
            compression level.
            </summary>
            <param name="compressionLevel">
            One of the <see cref="T:Gekkota.Compression.CompressionLevel"/>
            values.
            </param>
        </member>
        <member name="M:Gekkota.Compression.LZF.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses the specified region of the specified
            <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to
            compress.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes to
            compress.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the compressed data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less
            than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is out of bounds.
            <para>-or-</para>
            <paramref name="index"/> plus <paramref name="count"/> is
            greater than the length of <paramref name="data"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Compression.LZF.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses the specified region of the specified
            <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/> array that contains the data to
            decompress.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that represents the starting position
            within <paramref name="data"/>.
            </param>
            <param name="count">
            An <see cref="T:System.Int32"/> that represents the number of bytes
            to decompress.
            </param>
            <returns>
            A <see cref="T:System.Byte"/> array that contains the decompressed
            data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less
            than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is out of bounds.
            <para>-or-</para>
            <paramref name="index"/> plus <paramref name="count"/> is
            greater than the length of <paramref name="data"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Compression.LZF.CompressionLevel">
            <summary>
            Gets or sets the compression level.
            </summary>
            <value>
            One of the <see cref="T:Gekkota.Compression.CompressionLevel"/>
            values.
            </value>
        </member>
        <member name="T:Gekkota.Collections.Queue`1">
             <summary>
             Implements a queue with sort support.
             </summary>
             <example>
             The following example shows how to create and initialize a
             sorted <c>Queue</c> and how to print out its content.
             <code>
             <![CDATA[
             using System;
             using System.Collections;
             using Gekkota.Collections;
            
             public class MyClass
             {
                 public static void Main()
                 {
                     //
                     // create and initialize a new prioritized Queue
                     //
                     Queue<string> queue = new Queue<string>(true);
                     queue.Enqueue("Red");
                     queue.Enqueue("Green");
                     queue.Enqueue("Blue");
            
                     //
                     // display the content of the Queue
                     //
                     Console.WriteLine("queue");
                     Console.WriteLine("\tCount:           {0}", queue.Count);
                     Console.WriteLine("\tIsReadOnly:      {0}", queue.IsReadOnly);
                     Console.WriteLine("\tIsSynchronized:  {0}", queue.IsSynchronized);
                     Console.WriteLine("\tSorted:          {0}", queue.Sorted);
                     Console.WriteLine("\tValues:");
                     foreach (string element in Queue) {
                         Console.WriteLine("\n\t\t{0}", element);
                     }
            
                     //
                     // removes all the elements from the Queue
                     //
                     queue.Clear();
                 }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             queue
                 Count:           3
                 IsReadOnly:      false
                 IsSynchronized:  false
                 Sorted:          true
                 Values:
                     Blue
                     Green
                     Red
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Collections.Queue`1"/> class.
            </summary>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Collections.Queue`1"/> class with the
            specified boolean value indicating whether or not the
            <see cref="T:Gekkota.Collections.Queue`1"/> is sorted.
            </summary>
            <param name="sorted">
            A <see cref="T:System.Boolean"/> value indicating whether or not the
            <see cref="T:Gekkota.Collections.Queue`1"/> has to be sorted.
            </param>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.#ctor(Gekkota.Collections.LinkedList{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Collections.Queue`1"/> class with the
            specified <see cref="T:Gekkota.Collections.LinkedList`1"/>.
            </summary>
            <param name="source">
            A <see cref="T:Gekkota.Collections.LinkedList`1"/> that
            implements the <see cref="T:Gekkota.Collections.Queue`1"/>
            functionality.
            </param>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Clear">
            <summary>
            Removes all the elements from the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Gekkota.Collections.Queue`1"/> is read-only.
            <para>-or</para>
            The <see cref="T:Gekkota.Collections.Queue`1"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Clone">
            <summary>
            Creates a shallow copy of the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <returns>
            A shallow copy of the <see cref="T:Gekkota.Collections.Queue`1"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Contains(`0)">
            <summary>
            Determines whether or not the
            <see cref="T:Gekkota.Collections.Queue`1"/> contains the
            specified element.
            </summary>
            <param name="value">
            The element to locate in the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is found in the
            <see cref="T:Gekkota.Collections.Queue`1"/>; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            The comparation algorithm can be overridden by setting the
            <see cref="P:Gekkota.Collections.Queue`1.Comparer"/> property
            to a customized implementation of the
            <see cref="T:System.Collections.IComparer"/> interface.
            </remarks>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.CopyTo(`0[],System.Int32)">
             <summary>
             Copies the <see cref="T:Gekkota.Collections.Queue`1"/> to the
             specified one-dimensional array, starting at the specified array index.
             </summary>
             <param name="array">
             The one-dimensional array to which the elements of the
             <see cref="T:Gekkota.Collections.Queue`1"/> are copied.
             </param>
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="array"/>.
             <para>-or</para>
             The number of elements in the
             <see cref="T:Gekkota.Collections.Queue`1"/> is greater than
             the available space from <paramref name="index"/> to the end of
             <paramref name="array"/>.
             <para>-or-</para>
             <paramref name="array"/> is multidimensional.
             </exception>
             <example>
             The following example shows how to copy a
             <see cref="T:Gekkota.Collections.Queue`1"/> into a
             one-dimensional <see cref="T:System.Array"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Queue
             //
             Queue<string> queue = new Queue<string>();
             queue.Enqueue("Red");
             queue.Enqueue("Green");
             queue.Enqueue("Blue");
            
             string[] array = new string[queue.Length];
             queue.CopyTo(array, 0);
            
             for (int i = 0; i < array.Length; i++) {
                 Console.WriteLine(array[i]);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the <see cref="T:Gekkota.Collections.Queue`1"/> to the
             specified one-dimensional <see cref="T:System.Array"/>, starting at
             the specified array index.
             </summary>
             <param name="array">
             The one-dimensional <see cref="T:System.Array"/> to which the elements
             of the <see cref="T:Gekkota.Collections.Queue`1"/> are copied.
             </param>
             <param name="index">
             The zero-based index in <paramref name="array"/> at which copying
             begins.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than 0.
             </exception>
             <exception cref="T:System.ArgumentException">
             <paramref name="index"/> is equal to or greater than the length of
             <paramref name="array"/>.
             <para>-or</para>
             The number of elements in the
             <see cref="T:Gekkota.Collections.Queue`1"/> is greater than
             the available space from <paramref name="index"/> to the end
             of <paramref name="array"/>.
             <para>-or-</para>
             <paramref name="array"/> is multidimensional.
             </exception>
             <example>
             The following example shows how to copy a
             <see cref="T:Gekkota.Collections.Queue`1"/> into a
             one-dimensional <see cref="T:System.Array"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Queue
             //
             Queue<string> queue = new Queue<string>();
             queue.Enqueue("Red");
             queue.Enqueue("Green");
             queue.Enqueue("Blue");
            
             Array array = Array.CreateInstance(typeof(string), queue.Length);
             queue.CopyTo(array, 0);
            
             for (int i = 0; i < array.Length; i++) {
                 Console.WriteLine(array.GetValue(i));
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <returns>
            A <see cref="T:Gekkota.Collections.NodeEnumerator`1"/>
            for the <see cref="T:Gekkota.Collections.Queue`1"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Dequeue">
             <summary>
             Removes and returns the element at the beginning of the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </summary>
             <returns>
             The element that is removed from the beginning of the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </returns>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:Gekkota.Collections.Queue`1"/> is empty.
             </exception>
             <example>
             The following example shows how to remove elements from a
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Queue
             //
             Queue<string> queue = new Queue<string>();
             queue.Enqueue("White");
             queue.Enqueue("Black");
             queue.Enqueue("Red");
             queue.Enqueue("Green");
             queue.Enqueue("Blue");
            
             queue.Dequeue();
             queue.Dequeue();
            
             foreach (string element in queue) {
                 Console.WriteLine(element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Enqueue(`0)">
            <summary>
            Adds the specified value to the end of the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <param name="value">
            The value to add to the end of the
            <see cref="T:Gekkota.Collections.Queue`1"/>. The value can be
            <see langword="null"/>.
            </param>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Peek">
            <summary>
            Returns the element at the beginning of the
            <see cref="T:Gekkota.Collections.Queue`1"/> without removing
            it.
            </summary>
            <returns>
            The element at the beginning of the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Gekkota.Collections.Queue`1"/> is empty.
            </exception>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Remove(`0)">
             <summary>
             Removes the first occurrence of the specified value from the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </summary>
             <param name="value">
             The value to remove from the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </param>
             <example>
             The following example shows how to remove elements from a
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Queue
             //
             Queue<string> queue = new Queue<string>();
             queue.Add("Red");
             queue.Add("Green");
             queue.Add("Blue");
             queue.Add("White");
             queue.Add("Black");
            
             queue.Remove("White");
             queue.Remove("Black");
            
             foreach (string element in queue) {
                 Console.WriteLine(element);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.Synchronized(Gekkota.Collections.Queue{`0})">
             <summary>
             Returns a synchronized wrapper for the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </summary>
             <param name="queue">
             The <see cref="T:Gekkota.Collections.Queue`1"/> to wrap.
             </param>
             <returns>
             A synchronized wrapper around the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="queue"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a synchronized wrapper
             around a <see cref="T:Gekkota.Collections.Queue`1"/>.
             <code>
             <![CDATA[
             Queue<string> queue = new Queue<string>();
             Console.WriteLine("queue is {0}.",
                 queue.IsSynchronized ? "synchronized" : "not synchronized");
            
             Queue<string> syncQueue = Queue<string>.Synchronized(queue);
             Console.WriteLine("queue is {0}.",
                 syncQueue.IsSynchronized ? "synchronized" : "not synchronized");
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             queue is not synchronized.
             queue is synchronized.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Collections.Queue`1.ToArray">
             <summary>
             Copies the elements of the
             <see cref="T:Gekkota.Collections.Queue`1"/> to a new array.
             </summary>
             <returns>
             A new array containing elements copied from the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </returns>
             <example>
             The following example shows how to copy a
             <see cref="T:Gekkota.Collections.Queue`1"/> into a
             one-dimensional array.
             <code>
             <![CDATA[
             //
             // create and initialize a new Queue
             //
             Queue<string> queue = new Queue<string>();
             queue.Enqueue("Red");
             queue.Enqueue("Green");
             queue.Enqueue("Blue");
            
             string[] array = queue.ToArray();
            
             for (int i = 0; i < array.Length; i++) {
                 Console.WriteLine(array[i]);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Green
             Blue
             ]]>
             </example>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.Comparer">
             <summary>
             Gets or sets the comparer to use for the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </summary>
             <value>
             An <see cref="T:System.Collections.Generic.IComparer`1"/> that
             represents the comparer to use for the
             <see cref="T:Gekkota.Collections.Queue`1"/>.
             </value>
             <example>
             The following example shows how to customize the way elements in the
             <see cref="T:Gekkota.Collections.Queue`1"/> are enqueued.
             <code>
             <![CDATA[
             string[] elements = { "Red", "Green", "Blue" };
             Queue<string> queue = new Queue<string>(true);
             queue.Comparer = new MyComparer();
            
             //
             // sort elements by length
             ///
             foreach (string element in elements) {
                 queue.Enqueue(element);
             }
            
             foreach (string element in queue) {
                 Console.WriteLine(element);
             }
            
             ...
            
             public class MyComparer : IComparer
             {
                 int IComparer.Compare(object x, object y)
                 {
                     int xLength = ((string) x).Length;
                     int yLength = ((string) y).Length;
            
                     if (xLength > yLength) {
                         return 1;
                     } else if (xLength < yLength) {
                         return -1;
                     }
            
                     return 0;
               }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Red
             Blue
             Green
             ]]>
             </example>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of elements
            contained in the <see cref="T:Gekkota.Collections.Queue`1"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.IsReadOnly">
            <summary>
            Specifies whether the <see cref="T:Gekkota.Collections.Queue`1"/>
            is read-only.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Collections.Queue`1"/> is read-only;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether or not access to the
            <see cref="T:Gekkota.Collections.Queue`1"/> is
            synchronized.
            </summary>
            <value>
            <see langword="true"/> if access to the
            <see cref="T:Gekkota.Collections.Queue`1"/> is
            synchronized; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.Sorted">
            <summary>
            Gets a value indicating whether or not the
            <see cref="T:Gekkota.Collections.Queue`1"/> is sorted.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Collections.Queue`1"/> is sorted;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Collections.Queue`1.SyncRoot">
            <summary>
            Gets an <see cref="T:System.Object"/> that can be used to synchronize
            access to the <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that can be used to synchronize access
            to the <see cref="T:Gekkota.Collections.Queue`1"/>.
            </value>
            <example>
            The following example shows how to lock the
            <see cref="T:Gekkota.Collections.Queue`1"/> using
            <c>SyncRoot</c> during the entire enumeration.
            <code>
            <![CDATA[
            Queue<string> queue = new Queue<string>();
            
            ...
            
            lock (queue.SyncRoot) {
                foreach (string element in queue) {
                    //
                    // insert your code here
                    //
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Gekkota.Collections.Queue`1.SyncQueue">
            <summary>
            Implements a synchronized wrapper for the
            <see cref="T:Gekkota.Collections.Queue`1"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Checksums.Ccitt">
            <summary>
            Parameterizes the CRC algorithm implemented by the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> to make it behave as
            the CCITT algorithm.
            </summary>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.Name">
            <summary>
            Gets the algorithm name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the algorithm name.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.Width">
            <summary>
            Gets the algorithm width.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the algorithm width,
            in bits.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.Polynom">
            <summary>
            Gets the polynom.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the polynom.
            </value>
            <remarks>
            The <c>Polynom</c> property represents the unreflected polynom, and
            its bottom bit is always the LSB of the divisor regardless whether
            or not the algorithm is reflected.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.Initial">
            <summary>
            Gets the initial CRC value when the algorithm starts.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the initial CRC value
            when the algorithm starts.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.InputReflected">
            <summary>
            Gets a value indicating whether or not input bytes are processed
            with bit 0 being treated as the most significant bit (MSB) and bit 7
            being treated as the least significant bit (LSB).
            </summary>
            <value>
            <see langword="true" /> if input bytes have to be reflected;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.OutputReflected">
            <summary>
            Gets a value indicating whether or not the calculated CRC should to
            be reflected before it is XORed.
            </summary>
            <value>
            <see langword="true" /> if the calculated CRC should be reflected
            before it is XORed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Ccitt.XorOutput">
            <summary>
            Gets value that should be XORed to the calculated CRC before it is
            returned.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the value that should
            be XORed to the calculated CRC before it is returned.
            </value>
        </member>
        <member name="T:Gekkota.Checksums.Crc32">
            <summary>
            Parameterizes the CRC algorithm implemented by the
            <see cref="T:Gekkota.Checksums.ChecksumGenerator"/> to make it behave as
            the CRC32 algorithm.
            </summary>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.Name">
            <summary>
            Gets the algorithm name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the algorithm name.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.Width">
            <summary>
            Gets the algorithm width.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the algorithm width,
            in bits.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.Polynom">
            <summary>
            Gets the polynom.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the polynom.
            </value>
            <remarks>
            The <c>Polynom</c> property represents the unreflected polynom, and
            its bottom bit is always the LSB of the divisor regardless whether
            or not the algorithm is reflected.
            </remarks>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.Initial">
            <summary>
            Gets the initial CRC value when the algorithm starts.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the initial CRC value
            when the algorithm starts.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.InputReflected">
            <summary>
            Gets a value indicating whether or not input bytes are processed
            with bit 0 being treated as the most significant bit (MSB) and bit 7
            being treated as the least significant bit (LSB).
            </summary>
            <value>
            <see langword="true" /> if input bytes have to be reflected;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.OutputReflected">
            <summary>
            Gets a value indicating whether or not the calculated CRC should to
            be reflected before it is XORed.
            </summary>
            <value>
            <see langword="true" /> if the calculated CRC should be reflected
            before it is XORed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:Gekkota.Checksums.Crc32.XorOutput">
            <summary>
            Gets value that should be XORed to the calculated CRC before it is
            returned.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the value that should
            be XORed to the calculated CRC before it is returned.
            </value>
        </member>
        <member name="T:Gekkota.Net.PrimitiveValue">
            <summary>
            Implements a struct for mapping/unmapping primitive values into/from
            raw memory.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Metafield">
             <summary>
             Describes a <see cref="T:Gekkota.Net.Field"/>.
             </summary>
             <example>
             The following example shows how to create and initialize a
             <c>Metafield</c>, and how to print out its properties.
             <code>
             <![CDATA[
             using System;
             using Gekkota.Net;
            
             public class MyClass
             {
               public static void Main()
               {
                 //
                 // create and initialize a new Metafield
                 //
                 Metafield metafield = new Metafield(1, FieldType.Integral);
            
                 //
                 // display the properties of the Metafield
                 //
                 Console.WriteLine("metafield");
                 Console.WriteLine("\tCategory:    {0}", metafield.Category);
                 Console.WriteLine("\tId:          {0}", metafield.Id);
                 Console.WriteLine("\tIsPrimitive: {0}", metafield.IsPrimitive);
                 Console.WriteLine("\tIsReadOnly:  {0}", metafield.IsReadOnly);
                 Console.WriteLine("\tSize:        {0}", metafield.Size);
                 Console.WriteLine("\tType:        {0}", metafield.Type);
               }
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             metafield
                 Category:     FieldCategory.Undefined
                 Id:           1
                 IsPrimitive:  true
                 IsReadOnly:   false
                 Size:         4
                 Type:         FieldType.Integral
             ]]>
             </example>
             <seealso cref="T:Gekkota.Net.Field"/>
             <seealso cref="T:Gekkota.Net.FieldSerializer"/>
             <seealso cref="T:Gekkota.Net.Datagram"/>
        </member>
        <member name="M:Gekkota.Net.Metafield.op_Equality(Gekkota.Net.Metafield,Gekkota.Net.Metafield)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Metafield"/> objects are equal.
            </summary>
            <param name="metafield1">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield2"/>.
            </param>
            <param name="metafield2">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="metafield1"/> is equal to
            <paramref name="metafield2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.op_Inequality(Gekkota.Net.Metafield,Gekkota.Net.Metafield)">
            <summary>
            Determines whether or not the specified
            <see cref="T:Gekkota.Net.Metafield"/> objects are not equal.
            </summary>
            <param name="metafield1">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield2"/>.
            </param>
            <param name="metafield2">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="metafield1"/> is not equal to
            <paramref name="metafield2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Metafield"/>
            class.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Metafield.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Metafield"/>
            class with the specified field id.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the field id.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Metafield.#ctor(System.Int32,Gekkota.Net.FieldType)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Metafield"/>
            class with the specified field id and field type.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the field id.
            </param>
            <param name="type">
            One of the <see cref="T:Gekkota.Net.FieldType"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Metafield.#ctor(System.Int32,Gekkota.Net.FieldType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Metafield"/>
            class with the specified field id, field type, and field size.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the field id.
            </param>
            <param name="type">
            One of the <see cref="T:Gekkota.Net.FieldType"/> values.
            </param>
            <param name="size">
            An <see cref="T:System.Int32"/> that represents the field size.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            <para>-or-</para>
            <paramref name="type"/> identifies a vector type and <paramref name="size"/>
            is not between <see cref="F:System.UInt16.MinValue"/> and
            <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="type"/> is <see cref="F:Gekkota.Net.FieldType.Integral"/>
            and <paramref name="size"/> is not 1 (<see cref="T:System.Byte"/>),
            2 (<see cref="T:System.Int16"/>), 4 (<see cref="T:System.Int32"/>), or
            8 (<see cref="T:System.Int64"/>).
            <para>-or-</para>
            <paramref name="type"/> is <see cref="F:Gekkota.Net.FieldType.FloatingPoint"/>
            and <paramref name="size"/> is not 4 (<see cref="T:System.Single"/>) or
            8 (<see cref="T:System.Double"/>).
            </exception>
        </member>
        <member name="M:Gekkota.Net.Metafield.#ctor(System.Int32,Gekkota.Net.FieldType,System.Int32,Gekkota.Net.FieldCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Gekkota.Net.Metafield"/>
            class with the specified field id, field type, field size, and field
            category.
            </summary>
            <param name="id">
            An <see cref="T:System.Int32"/> that represents the field id.
            </param>
            <param name="type">
            One of the <see cref="T:Gekkota.Net.FieldType"/> values.
            </param>
            <param name="size">
            An <see cref="T:System.Int32"/> that represents the field size.
            </param>
            <param name="category">
            One of the <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="id"/> is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            <para>-or-</para>
            <paramref name="type"/> identifies a vector type and <paramref name="size"/>
            is not between <see cref="F:System.UInt16.MinValue"/> and
            <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="type"/> is <see cref="F:Gekkota.Net.FieldType.Integral"/>
            and <paramref name="size"/> is not 1 (<see cref="T:System.Byte"/>),
            2 (<see cref="T:System.Int16"/>), 4 (<see cref="T:System.Int32"/>), or
            8 (<see cref="T:System.Int64"/>).
            <para>-or-</para>
            <paramref name="type"/> is <see cref="F:Gekkota.Net.FieldType.FloatingPoint"/>
            and <paramref name="size"/> is not 4 (<see cref="T:System.Single"/>) or
            8 (<see cref="T:System.Double"/>).
            <para>-or-</para>
            <paramref name="category"/> is <see cref="F:Gekkota.Net.FieldCategory.Header"/>
            and <paramref name="size"/> is not greater than 0.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Metafield.#cctor">
            <summary>
            Initializes static members.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Metafield.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <returns>
            A deep copy of the <see cref="T:Gekkota.Net.Metafield"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.Equals(Gekkota.Net.Metafield,Gekkota.Net.Metafield)">
            <summary>
            Determines whether or not the specified <see cref="T:Gekkota.Net.Metafield"/>
            objects are equal.
            </summary>
            <param name="metafield1">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield2"/>.
            </param>
            <param name="metafield2">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with
            <paramref name="metafield1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="metafield1"/> is equal to
            <paramref name="metafield2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.Equals(Gekkota.Net.Metafield)">
            <summary>
            Determines whether or not the specified <see cref="T:Gekkota.Net.Metafield"/>
            is equal to the current <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <param name="metafield">
            The <see cref="T:Gekkota.Net.Metafield"/> to compare with the current
            <see cref="T:Gekkota.Net.Metafield"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="metafield"/> is equal to
            the current <see cref="T:Gekkota.Net.Metafield"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.Equals(System.Object)">
            <summary>
            Determines whether or not the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <param name="metafield">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:Gekkota.Net.Metafield"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="metafield"/> is equal to
            the current <see cref="T:Gekkota.Net.Metafield"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Gekkota.Net.Metafield.ReadOnly(Gekkota.Net.Metafield)">
             <summary>
             Returns a read-only wrapper for the <see cref="T:Gekkota.Net.Metafield"/>.
             </summary>
             <param name="metafield">
             The <see cref="T:Gekkota.Net.Metafield"/> to wrap.
             </param>
             <returns>
             A read-only wrapper around the <see cref="T:Gekkota.Net.Metafield"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="metafield"/> is <see langword="null"/>.
             </exception>
             <example>
             The following example shows how to create a read-only wrapper around a
             <see cref="T:Gekkota.Net.Metafield"/>.
             <code>
             <![CDATA[
             //
             // create and initialize a new Metafield
             //
             Metafield metafield = new Metafield(1, FieldType.Integral);
             Metafield readOnlyMetafield = Metafield.ReadOnly(metafield);
            
             //
             // any attempt to modify a read-only Metafield throws an exception
             //
             try {
               readOnlyMetafield.Id = 2;
             } catch (NotSupportedException e) {
               Console.WriteLine("Error: {0}", e.Message);
             }
             ]]>
             </code>
             The code above produces the following output:
             <![CDATA[
             Error: Instance not modifiable.
             ]]>
             </example>
        </member>
        <member name="M:Gekkota.Net.Metafield.InternalClone">
            <summary>
            Creates a deep copy of the <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <returns>
            A deep copy of the <see cref="T:Gekkota.Net.Metafield"/>.
            </returns>
        </member>
        <member name="P:Gekkota.Net.Metafield.Category">
            <summary>
            Gets or sets the field category.
            </summary>
            <value>
            One of the <see cref="T:Gekkota.Net.FieldCategory"/> values.
            </value>
            <exception cref="T:System.ArgumentException">
            The specified value is <see cref="F:Gekkota.Net.FieldCategory.Header"/>
            and the <see cref="P:Gekkota.Net.Metafield.Size"/> property is not
            greater than 0.
            </exception>
            <remarks>
            Header fields must always have a predetermined size greater than 0,
            even if they are not primitive.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Metafield.LayoutSize">
            <summary>
            Gets the size of the physical layout of the
            <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the size of the
            physical layout of the <see cref="T:Gekkota.Net.Metafield"/>, in bytes.
            </value>
            <remarks>
            The physical layout contains the internal metadata that describes
            the field.
            </remarks>
        </member>
        <member name="P:Gekkota.Net.Metafield.Id">
            <summary>
            Gets or sets the field id.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the field id.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is not between <see cref="F:System.UInt16.MinValue"/>
            and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Metafield.IsReadOnly">
            <summary>
            Specifies whether the <see cref="T:Gekkota.Net.Metafield"/> is
            read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Metafield"/>
            is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Metafield.IsPrimitive">
            <summary>
            Gets a value indicating whether or not the field is primitive.
            </summary>
            <value>
            <see langword="true"/> if the field is primitive; otherwise,
            <see langword="false"/>.
            </value>
            <seealso cref="T:Gekkota.Net.FieldType"/>
        </member>
        <member name="P:Gekkota.Net.Metafield.Size">
            <summary>
            Gets or sets the field size.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the field size, in bytes.
            </value>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:Gekkota.Net.Metafield.Type"/> property is
            <see cref="F:Gekkota.Net.FieldType.Integral"/> and the specified value
            is not 1 (<see cref="T:System.Byte"/>), 2 (<see cref="T:System.Int16"/>),
            4 (<see cref="T:System.Int32"/>), or 8 (<see cref="T:System.Int64"/>).
            <para>-or</para>
            The <see cref="P:Gekkota.Net.Metafield.Type"/> property is
            <see cref="F:Gekkota.Net.FieldType.FloatingPoint"/> and the specified
            value is not 4 (<see cref="T:System.Single"/>) or 8 (<see cref="T:System.Double"/>).
            <para>-or-</para>
            The <see cref="P:Gekkota.Net.Metafield.Type"/> property identifies a
            vector type, the <see cref="P:Gekkota.Net.Metafield.Category"/> property
            is <see cref="F:Gekkota.Net.FieldCategory.Header"/>, and the specified
            value is not greater than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <see cref="P:Gekkota.Net.Metafield.Type"/> property identifies a
            vector type and the specified value is not between
            <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="P:Gekkota.Net.Metafield.Type">
            <summary>
            Gets or sets the field type.
            </summary>
            <value>
            One of the <see cref="T:Gekkota.Net.FieldType"/> values.
            </value>
            <remarks>
            If the specified value identifies a primitive type, the
            <see cref="P:Gekkota.Net.Metafield.Size"/> property is default to the
            size of an <see cref="T:System.Int32"/>, otherwise the
            <see cref="P:Gekkota.Net.Metafield.Size"/> property is default to 0.
            </remarks>
        </member>
        <member name="T:Gekkota.Net.Metafield.ReadOnlyMetafield">
            <summary>
            Implements a read-only wrapper for the
            <see cref="T:Gekkota.Net.Metafield"/>.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.DatagramPriority">
            <summary>
            Defines <see cref="T:Gekkota.Net.Datagram"/> priority values.
            </summary>
            <seealso cref="T:Gekkota.Net.Datagram"/>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.Highest">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has highest priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.VeryHigh">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has between highest and high
            priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.High">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has high priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.AboveNormal">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has between high and normal
            priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.Normal">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has normal priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.Low">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has low priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.VeryLow">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has between low and lowest
            priority.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.DatagramPriority.Lowest">
            <summary>
            The <see cref="T:Gekkota.Net.Datagram"/> has lowest priority.
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.Bandwidth">
            <summary>
            Contains a constant used to specify full bandwidth.
            </summary>
        </member>
        <member name="F:Gekkota.Net.Sockets.Bandwidth.Full">
            <summary>
            A constant used to specify full bandwidth.
            </summary>
        </member>
        <member name="T:Gekkota.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_AddressFamilyNotValid">
            <summary>
              Looks up a localized string similar to Address family not valid..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CannotAddOrRemove">
            <summary>
              Looks up a localized string similar to Cannot add or remove elements..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CannotConvertFieldValue">
            <summary>
              Looks up a localized string similar to Cannot convert field value to {0}..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CollectionEmpty">
            <summary>
              Looks up a localized string similar to Collection empty..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CollectionNotConsistent">
            <summary>
              Looks up a localized string similar to Collection modified after the enumerator was created..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CollectionSorted">
            <summary>
              Looks up a localized string similar to Collection sorted..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_CompressionError">
            <summary>
              Looks up a localized string similar to Compression error..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_DatagramEmpty">
            <summary>
              Looks up a localized string similar to Datagram empty..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_DatagramNotValid">
            <summary>
              Looks up a localized string similar to Datagram not valid..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_DecompressionError">
            <summary>
              Looks up a localized string similar to Decompression error..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_DeserializationError">
            <summary>
              Looks up a localized string similar to Deserialization error..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_EnumeratorNotValid">
            <summary>
              Looks up a localized string similar to Enumerator not valid..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_FieldDoesNotExist">
            <summary>
              Looks up a localized string similar to Field {0} does not exist..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_IndexOutOfBounds">
            <summary>
              Looks up a localized string similar to Index out of bounds..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_InstanceNotModifiable">
            <summary>
              Looks up a localized string similar to Instance not modifiable..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_MemberNotValid">
            <summary>
              Looks up a localized string similar to Member {0} not valid..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_NonNegativeNumberRequired">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_NonZeroNumberRequired">
            <summary>
              Looks up a localized string similar to Non-zero number required..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_NotEnoughSpaceAvailable">
            <summary>
              Looks up a localized string similar to {0} plus {1} is greater than the length of the collection..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_NotSubclassOf">
            <summary>
              Looks up a localized string similar to {0} not subclass of {1}..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_PropertyNotSettable">
            <summary>
              Looks up a localized string similar to Property not settable..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_RemoteHostAlreadyEstablished">
            <summary>
              Looks up a localized string similar to Default remote host already established..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_RemoteHostNotEstablished">
            <summary>
              Looks up a localized string similar to Default remote host not established..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_SerializationError">
            <summary>
              Looks up a localized string similar to Serialization error..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_StringEmpty">
            <summary>
              Looks up a localized string similar to String empty..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_TypeNotFound">
            <summary>
              Looks up a localized string similar to Type {0} not found in assembly {1}..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_ValueNotValid">
            <summary>
              Looks up a localized string similar to Value not valid..
            </summary>
        </member>
        <member name="P:Gekkota.Properties.Resources.Error_ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value not between {0} and {1}..
            </summary>
        </member>
        <member name="T:Gekkota.Net.Sockets.UdpClient">
            <summary>
            Provides User Datagram Protocol (UDP) network services.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class with the
            specified addressing scheme.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="addressFamily"/> is neither
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> nor
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class and binds it to
            the specified local port number.
            </summary>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the local port number
            through which data is sent or received.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class with the
            specified addressing scheme and binds it to the specified local port
            number.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the local port number
            through which data is sent or received.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="addressFamily"/> is neither
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> nor
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class and binds it to
            the specified local endpoint.
            </summary>
            <param name="localEndPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the local
            endpoint through which data is sent or received.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="localEndPoint"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> class and establishes a
            default remote host using the specified host name and port number.
            </summary>
            <param name="hostname">
            A <see cref="T:System.String"/> that contains the DNS name of the
            remote host to which data should be sent.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that represents the port number on
            the remote host to which data should be sent.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="hostname"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <remarks>
            Do not use this constructor if you intend to receive multicasted
            datagrams.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.UdpClient.CreateClient(System.Net.Sockets.AddressFamily)">
            <summary>
            Returns a network <see cref="T:System.Net.Sockets.Socket"/> that uses
            UDP as the communication protocol.
            </summary>
            <param name="addressFamily">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.
            </param>
            <returns>
            A <see cref="T:System.Net.Sockets.Socket"/> that uses UDP as the
            communication protocol.
            </returns>
        </member>
        <member name="P:Gekkota.Net.Sockets.UdpClient.NoChecksum">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> should send datagrams
            with checksum set to zero.
            </summary>
            <value>
            <see langword="true"/> if the
            <see cref="T:Gekkota.Net.Sockets.UdpClient"/> should send datagrams
            with checksum set to zero; otherwise, <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Gekkota.Net.Sockets.UdpClient"/> has been terminated.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the underlying
            <see cref="T:System.Net.Sockets.Socket"/>
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.UdpClient.ProtocolName">
            <summary>
            Gets the protocol name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the protocol name.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.UdpClient.BaseOverhead">
            <summary>
            Gets the overhead generated by TCP/IP headers.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the overhead
            generated by TCP/IP headers, in bytes.
            </value>
        </member>
        <member name="T:Gekkota.Net.Sockets.XudpClient">
            <summary>
            Provides Cross User Datagram Protocol (XUDP) network services.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.XudpClient.#ctor(Gekkota.Net.Sockets.IPClient)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Gekkota.Net.Sockets.XudpClient"/> class with the
            specified base protocol.
            </summary>
            <param name="client">
            A <see cref="T:Gekkota.Net.Sockets.IPClient"/> that represents the
            protocol the <see cref="T:Gekkota.Net.Sockets.XudpClient"/> is based
            on.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="client"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <paramref name="client"/> can be any IP-based protocol
            implementation.
            </remarks>
        </member>
        <member name="M:Gekkota.Net.Sockets.XudpClient.Finalize">
            <summary>
            Frees the resources used by the
            <see cref="T:Gekkota.Net.Sockets.XudpClient"/>.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.XudpClient.System#IDisposable#Dispose">
            <summary>
            Terminates the <see cref="T:Gekkota.Net.Sockets.XudpClient"/> and
            releases all the associated resources.
            </summary>
        </member>
        <member name="M:Gekkota.Net.Sockets.XudpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:Gekkota.Net.Sockets.XudpClient"/>, and optionally disposes
            off the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged
            resources; <see langword="false"/> to release only unmanaged
            resources.
            </param>
        </member>
        <member name="P:Gekkota.Net.Sockets.XudpClient.IsDisposed">
            <summary>
            Gets or sets a value indicating whether or not the
            <see cref="T:Gekkota.Net.Sockets.XudpClient"/> has been disposed off.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:Gekkota.Net.Sockets.XudpClient"/>
            has been disposed off; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Gekkota.Net.Sockets.XudpClient.IncomingBandwidth">
            <summary>
            Gets or sets the downstream bandwidth.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the number of bits
            that can be received per second. The default value is
            <see cref="F:Gekkota.Net.Sockets.Bandwidth.Full"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than 0
            </exception>
        </member>
        <member name="P:Gekkota.Net.Sockets.XudpClient.OutgoingBandwidth">
            <summary>
            Gets or sets the upstream bandwidth.
            </summary>
            <value>
            An <see cref="T:System.Int64"/> that represents the number of bits
            that can be sent per second. The default value is
            <see cref="F:Gekkota.Net.Sockets.Bandwidth.Full"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than 0
            </exception>
        </member>
    </members>
</doc>
