//------------------------------------------------------------------------------
// <sourcefile name="UdpClient.cs" language="C#" begin="05/21/2004">
//
//     <author name="Giuseppe Greco" email="giuseppe.greco@agamura.com" />
//
//     <copyright company="Agamura" url="http://www.agamura.com">
//         Copyright (C) 2004 Agamura, Inc.  All rights reserved.
//     </copyright>
//
// </sourcefile>
//------------------------------------------------------------------------------

using System;
using System.Net;
using System.Net.Sockets;

namespace Gekkota.Net.Sockets
{
    /// <summary>
    /// Provides User Datagram Protocol (UDP) network services.
    /// </summary>
    public class UdpClient : IPClient, IDisposable
    {
        #region private fields
        private const int UdpHeaderSize = 8;
        #endregion private fields

        #region public properties
        /// <summary>
        /// Gets or sets a value indicating whether or not the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> should send datagrams
        /// with checksum set to zero.
        /// </summary>
        /// <value>
        /// <see langword="true" /> if the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> should send datagrams
        /// with checksum set to zero; otherwise, <see langword="false" />. The
        /// default value is <see langword="false" />.
        /// </value>
        /// <exception cref="System.ObjectDisposedException">
        /// The <see cref="Gekkota.Net.Sockets.UdpClient" /> has been terminated.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />
        /// </exception>
        public bool NoChecksum
        {
            get {
                CheckIfDisposed();

                return 0 != (int) Client.GetSocketOption(
                    SocketOptionLevel.Udp,
                    SocketOptionName.NoChecksum);
            }

            set {
                CheckIfDisposed();

                Client.SetSocketOption(
                    SocketOptionLevel.Udp,
                    SocketOptionName.NoChecksum, value ? 1 : 0);
            }
        }

        /// <summary>
        /// Gets the protocol name.
        /// </summary>
        /// <value>
        /// A <see cref="System.String" /> that contains the protocol name.
        /// </value>
        public override string ProtocolName
        {
            get { return "UDP"; }
        }
        #endregion public properties

        #region internal properties
        /// <summary>
        /// Gets the overhead generated by TCP/IP headers.
        /// </summary>
        /// <value>
        /// An <see cref="System.Int32" /> that represents the overhead
        /// generated by TCP/IP headers, in bytes.
        /// </value>
        internal override int BaseOverhead
        {
            get { return base.BaseOverhead + UdpHeaderSize; }
        }
        #endregion internal properties

        #region public constructors
        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class.
        /// </summary>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        public UdpClient()
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class with the
        /// specified addressing scheme.
        /// </summary>
        /// <param name="addressFamily">
        /// One of the <see cref="System.Net.Sockets.AddressFamily" /> values.
        /// </param>
        /// <exception cref="System.ArgumentException">
        /// <paramref name="addressFamily" /> is neither
        /// <see cref="System.Net.Sockets.AddressFamily.InterNetwork" /> nor
        /// <see cref="System.Net.Sockets.AddressFamily.InterNetworkV6" />.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        public UdpClient(AddressFamily addressFamily)
            : base(addressFamily)
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class and binds it to
        /// the specified local port number.
        /// </summary>
        /// <param name="port">
        /// An <see cref="System.Int32" /> that represents the local port number
        /// through which data is sent or received.
        /// </param>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// <paramref name="port" /> is not between <see cref="System.Net.IPEndPoint.MinPort" />
        /// and <see cref="System.Net.IPEndPoint.MaxPort" />.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        public UdpClient(int port)
            : base(port)
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class with the
        /// specified addressing scheme and binds it to the specified local port
        /// number.
        /// </summary>
        /// <param name="addressFamily">
        /// One of the <see cref="System.Net.Sockets.AddressFamily" /> values.
        /// </param>
        /// <param name="port">
        /// An <see cref="System.Int32" /> that represents the local port number
        /// through which data is sent or received.
        /// </param>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// <paramref name="port" /> is not between <see cref="System.Net.IPEndPoint.MinPort" />
        /// and <see cref="System.Net.IPEndPoint.MaxPort" />.
        /// </exception>
        /// <exception cref="System.ArgumentException">
        /// <paramref name="addressFamily" /> is neither
        /// <see cref="System.Net.Sockets.AddressFamily.InterNetwork" /> nor
        /// <see cref="System.Net.Sockets.AddressFamily.InterNetworkV6" />.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        public UdpClient(int port, AddressFamily addressFamily)
            : base(port, addressFamily)
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class and binds it to
        /// the specified local endpoint.
        /// </summary>
        /// <param name="localEndPoint">
        /// An <see cref="System.Net.IPEndPoint" /> that represents the local
        /// endpoint through which data is sent or received.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// <paramref name="localEndPoint" /> is <see langword="null" />.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        public UdpClient(IPEndPoint localEndPoint)
            : base(localEndPoint)
        {
        }

        /// <summary>
        /// Initializes a new instance of the
        /// <see cref="Gekkota.Net.Sockets.UdpClient" /> class and establishes a
        /// default remote host using the specified host name and port number.
        /// </summary>
        /// <param name="hostname">
        /// A <see cref="System.String" /> that contains the DNS name of the
        /// remote host to which data should be sent.
        /// </param>
        /// <param name="port">
        /// An <see cref="System.Int32" /> that represents the port number on
        /// the remote host to which data should be sent.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// <paramref name="hostname" /> is <see langword="null" />.
        /// </exception>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// <paramref name="port" /> is not between <see cref="System.Net.IPEndPoint.MinPort" />
        /// and <see cref="System.Net.IPEndPoint.MaxPort" />.
        /// </exception>
        /// <exception cref="System.Net.Sockets.SocketException">
        /// An error occurred when accessing the underlying
        /// <see cref="System.Net.Sockets.Socket" />.
        /// </exception>
        /// <remarks>
        /// Do not use this constructor if you intend to receive multicasted
        /// datagrams.
        /// </remarks>
        public UdpClient(string hostname, int port)
            : base(hostname, port)
        {
        }
        #endregion public constructors

        #region protected methods
        /// <summary>
        /// Returns a network <see cref="System.Net.Sockets.Socket" /> that uses
        /// UDP as the communication protocol.
        /// </summary>
        /// <param name="addressFamily">
        /// One of the <see cref="System.Net.Sockets.AddressFamily" /> values.
        /// </param>
        /// <returns>
        /// A <see cref="System.Net.Sockets.Socket" /> that uses UDP as the
        /// communication protocol.
        /// </returns>
        protected override Socket CreateClient(AddressFamily addressFamily)
        {
            return new Socket(addressFamily, SocketType.Dgram, ProtocolType.Udp);
        }
        #endregion protected methods
    }
}
